{
  "test_name": "no_documentation",
  "total_code_cells_attempted": 0,
  "total_failures": 0,
  "final_successful_cells": 102,
  "final_failed_cells": 33,
  "failure_rate": 0.0,
  "final_success_rate": 0.7555555555555555,
  "failed_fix_attempts_per_step": {},
  "analyses": [
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_3.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Define relevant ligand-receptor pairs ..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Define 'young' and 'aged' sample grou..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Filter for relevant cell types\nmicroglia_nscs = adata[adat..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Define 'young' and 'aged' sample groups based on biologica..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define 'young' and 'aged'..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Define young and aged groups based on specific age cut-of..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Restrict analysis to relevant cell ty..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Focus on relevant cell types and categ..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_2.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sc..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\n# Define custom age..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Define age bins for analysis\nages = a..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\nimport warnings\n\nwar..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom statsmodels.stats.multitest import ..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom statsmodels.stats.multitest import m..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Log transformation of expression data\n..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Ensure raw data is initialized\nif ada..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_14.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Enhanced Preprocessing\nsc.pp.filter_cells(adata, min_genes=200)\nsc.pp.filter_..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set visualization defau..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "from numpy.random import seed\nseed(42)\nsc.pp.neighbors(adata, n_neighbors=20, n_pcs=30, metric='eucl..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Ensure the neighborhood graph is calculated before running UMAP\nsc.pp.neighbo..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Enhanced Preprocessing\nsc.pp.filter_cells(adata, min_genes=200)\nsc.pp.filter..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nfrom sklearn.decomposition import FastICA\n\n# Verify that adata is not empty bef..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure 'adata' has been properly defined and contains the expected observati..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import FastICA\n\n# Val..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_7.ipynb",
      "total_code_cells": 9,
      "successful_cells": 9,
      "failed_cells": 0,
      "success_rate": 1.0,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Define comprehensive lists of metabolism-related genes us..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Verify gene matching and log unmatched genes\ndata = sc.rea..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Define comprehensive lists of metabolism-related genes usi..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Define comprehensive lists of metabolism-related genes usi..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Define comprehensive lists of metabolism-related genes ma..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport json\n\n# Simulate fetching gene li..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Assume 'adata' object is defined and ..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport json\n\n# Define novel metabolic pathways and check gene..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_6.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Filter for microglia and astrocytes f..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Filter for specific cell types involve..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Define cell types for ligand and recep..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Sensitivity analysis on ligand/recepto..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport warnings\n\n# Ensure 'Age' is treat..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Data n..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Perfor..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport w..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_15.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib...."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport s..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import mannwhitneyu\n\n# ..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import pandas as pd\n\n# Assuming `results_df` from the previous differential expression analysis\n# Fi..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "# Import necessary package\nimport scanpy as sc"
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Subset AnnData for Microglia cells\nmic..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Subset AnnData for Microglia cells\nmi..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom statsmodels.stats.multitest import ..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_4.ipynb",
      "total_code_cells": 9,
      "successful_cells": 9,
      "failed_cells": 0,
      "success_rate": 1.0,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Filter for NSCs and relevant progeny\nadata_nsc = adata[adata.obs['Celltype']..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Re-evaluate progenitor cell identification\nadata_nsc = adata[adata.obs['Cell..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Filter for NSCs\nadata_nsc = adata[adata.obs['Celltype'].isin(['aNSC_NPC_1', '..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scvi.model import SCVI\n\n# Load and filter for NSCs\nadata_nsc =..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\nfrom scvi.model import SCVI\n\n# Prepare the NSC data for further anal..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\nfrom scvi.model import SCVI\nimport numpy as np\n\n# Subsample the data..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\nfrom scvi.model import SCVI\n\n# Filter for NSCs by cell type\nadata_ns..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\n\n# Load and filter NSC data\nadata_nsc = adata[adata.obs['Celltype']...."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_10.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "nsc_adata = adata[(adata.obs['Celltype'].isin(['aNSC_NPC_1', 'aNSC_NPC_2'])) & (adata.obs['Age'] < 1..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nnsc_adata = adata[adata.obs['Celltype'].isin(['aNSC_NPC_1', 'aNSC_NPC_2']), :].copy()\n\n# Group data..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport numpy as np\n\n# Subset astrocytes and endothelial cells and categorize into granular age grou..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "import numpy as np\nimport scanpy as sc\n\n# Load specific cell types and categorize by biologically me..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "try:\n    astro_endothelial_adata_retry = adata[adata.obs['Celltype'].isin(['Astrocyte_qNSC', 'Endoth..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport numpy as np\nimport scvi\n\n# Subset astrocytes and endothelial cells and categorize by biologi..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Construct k-NN graph on the scVI latent space\nsc.pp.neighbors(astro_endotheli..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset astrocytes and endothelial cells\nastro_endothelial_..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_12.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure Age is categorical\nadata.obs['Age'] = adata.obs['Age'].astype('catego..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Define validated set of chromatin and..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Ensure Age is categorical\nadata.obs['Age'] = adata.obs['Age'].as..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Error handling for initial gene selection\nmarker_gene_pat..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Error handling for initia..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Ensure Age is categorical\nadata.obs['Age'] = adata.obs['Age'].astype('categor..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure adata is defined\nif 'adata' not in globals():\n    ..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc \nimport numpy as np \nimport scvi\n\n# Ensure Age is categorized and subset specif..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_8.ipynb",
      "total_code_cells": 9,
      "successful_cells": 9,
      "failed_cells": 0,
      "success_rate": 1.0,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Preprocess and normalize data\nadata = adata.raw.to_adata()  # Copy raw data\na..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Set up visualization defaults for better plots\nsc.settings.verbosity = 3  # ..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Adjust filtering parameters\nadata.var_names_make_unique()..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\n\nadata.var_names_make_unique()\nsc.pp.filter_cells(adata, min_genes=50)\nsc.pp.fil..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\nadata.var_names_make_unique()\n# Check the structure of adata before filtering\n..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\nadata.var_names_make_unique()\n\n# Ensure there is no divisio..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\n\nadata.var_names_make_unique()\n\ntry:\n    if adata.n_obs > 0 and adata.n_vars > 0..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport logging\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\nlogger =..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_13.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Preliminary data quality control and filtering\nsc.pp.filt..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Consistent and Improved Quality Control Filters\nsc.pp.filter_cells(adata, mi..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Consistent and Improved Quality Control Filters\nsc.pp.filter_cells(adata, mi..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Streamlined Quality Control & Filtering\nsc.pp.filter_cells(adata, min_genes=..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Load the anndata object containing filtered and preprocessed data\nadata = sc..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Verify the presence of transcription factor genes\nunexplor..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Define updated list of potential transcription factors an..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Construct neighbors graph for clustering analysis\nsc.pp.pca(adata, n_comps=30..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_9.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Assume the dataset is already loaded into 'adata'\n\n# Preprocessing\nsc.pp.fil..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Construct kNN graph\nadata_copy = adata.copy()\nsc.pp.pca(adata_copy, n_comps=5..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Assume adata is already loaded\n\n# Define mar..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Perform Quality Control\nfiltered_data = adata.copy()\nsc.pp.filter_cells(filt..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Define comprehensive markers for clear identification of ..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define markers for astroc..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Filter the data for cells belonging to astro..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "# Filter the data for cells belonging to astrocytes and endothelial subtypes\nadata_astro_endothelial..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_11.ipynb",
      "total_code_cells": 9,
      "successful_cells": 9,
      "failed_cells": 0,
      "success_rate": 1.0,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Load the data and apply normalization and log transformation\nsc.pp.filter_cel..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Construct a k-nearest neighbor graph before UMAP\nsc.pp.neighbors(adata, n_nei..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset the data to focus on Astrocytes and Endothelial cells\nadata_astrocytes..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Convert 'Age' column to categorical\nadata_astrocytes.obs['Age'] = adata_astr..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Convert 'Age' column t..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nfrom scipy.stats import ks_2samp\n\n# Ensure the ..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport pandas as pd\nimport scanpy as sc\n\n# Ensure 'Age' column is categorical\nadata.obs['Age'] = ad..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming 'adata' is the variable intended to be used ins..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_1.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport numpy as np\n\nyoung_cutoff = 10\n\n# Define groups based on a chosen cutoff (selected based on ..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib...."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\n# Step 1: Pre-calculate neighbors graph and UMAP\nimport scanpy as sc\nimport matplotlib.pyplot as pl..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scanpy as sc\n\n# Set..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scanpy as sc\nfrom s..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Convert continuous ages into categorical groups\nadata.obs['AgeGroup'] = pd.cu..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "# Step 1: Gene Filtering and Log-Normalization\nimport scanpy as sc\n\n# Filter genes expressed in fewe..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport pandas as pd\n\n# Load the data\nadata = sc.read('/scratch/user..."
        }
      ]
    },
    {
      "notebook_path": "aging_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_5.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assume 'adata' is already defined and loaded as AnnData o..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Define expanded gene sets and ra..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\n# Re-evaluate gene nomenclature and align with adata.var_names\nimport scanpy as sc\nimport pandas as..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc \nimport numpy as np \nimport pandas as pd \nfrom scipy.stats import mannwhitneyu ..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Define gene sets\ns_genes = ['MCM5', 'PCNA', 'TYMS', 'FEN1..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure data is loaded in variable named adata and contain..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport seaborn as sns\n\n# Load and assert key columns exist in..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure ATAC-seq and scRNA-seq data are loaded in adata_AT..."
        }
      ]
    }
  ],
  "errors": []
}