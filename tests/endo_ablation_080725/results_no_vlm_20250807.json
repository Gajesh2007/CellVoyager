{
  "test_name": "no_vlm_20250807",
  "total_code_cells_attempted": 523,
  "total_failures": 411,
  "final_successful_cells": 115,
  "final_failed_cells": 110,
  "failure_rate": 0.7858508604206501,
  "final_success_rate": 0.5111111111111111,
  "failed_fix_attempts_per_step": {
    "endo_ablation_080725/test_results_no_vlm_20250807_122806/logs/test_no_vlm_log_20250807_122829.log": {
      "1": {
        "1": 0,
        "2": 0,
        "3": 3,
        "4": 0,
        "5": 3,
        "6": 3,
        "7": 0,
        "8": 3
      },
      "2": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
      },
      "3": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 1,
        "5": 3,
        "6": 1,
        "7": 3,
        "8": 3
      },
      "4": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 0,
        "8": 0
      },
      "5": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 2,
        "6": 0,
        "7": 0,
        "8": 3
      },
      "6": {
        "1": 0,
        "2": 1,
        "3": 3,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "7": {
        "1": 0,
        "2": 3,
        "3": 0,
        "4": 0,
        "5": 3,
        "6": 3,
        "7": 0,
        "8": 0
      },
      "8": {
        "1": 0,
        "2": 0,
        "3": 3,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
      },
      "9": {
        "1": 0,
        "2": 3,
        "3": 3,
        "4": 0,
        "5": 2,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "10": {
        "1": 0,
        "2": 3,
        "3": 0,
        "4": 3,
        "5": 0,
        "6": 1,
        "7": 3,
        "8": 3
      },
      "11": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "12": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
      },
      "13": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 1,
        "5": 2,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "14": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 3,
        "5": 0,
        "6": 0,
        "7": 3,
        "8": 0
      },
      "15": {
        "1": 0,
        "2": 0,
        "3": 2,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 3,
        "8": 3
      },
      "16": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 1,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "17": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 1,
        "5": 0,
        "6": 0,
        "7": 3,
        "8": 3
      },
      "18": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 3,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
      },
      "19": {
        "1": 0,
        "2": 3,
        "3": 3,
        "4": 1,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "20": {
        "1": 3,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "21": {
        "1": 2,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "22": {
        "1": 0,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "23": {
        "1": 3,
        "2": 2,
        "3": 3,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 0,
        "8": 3
      },
      "24": {
        "1": 1,
        "2": 1,
        "3": 0,
        "4": 2,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "25": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 3,
        "6": 3,
        "7": 0,
        "8": 0
      }
    }
  },
  "analyses": [
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_15.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "smooth_muscle_cells = adata[adata.obs['cell_type'] == 'Smooth muscle cells', :]"
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nCELL_TYPE = 'Smooth muscle cells'\ncell_type_exists = CELL_TYPE in adata.obs['cell_type'].unique()\ni..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\n# Quality Control Step\n# Enhanced filtering with emphasis on data cleanliness\nimport scanpy as sc\n\n..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\n# Corrected Quality Control\nimport scanpy as sc\n\n# Focus on Smooth Muscle Cells for targeted analys..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "# Quality Control with EDA-based Thresholds\n\nimport scanpy as sc\n\n# Define cell type for analysis\nad..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "# Reevaluate Quality Control with Detailed Rationale\n\nimport scanpy as sc\n\n# Focus on smooth muscle ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\n# Implementing the SCVI Model for Latent Space Analysis\n\nimport scvi\nimport anndata\n\n# Ensure 'adat..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Ensure scvi version compatibility\nscvi.settings.verbosity = 3  #..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_10.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure quality control by filtering cells with low counts..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scvi\nfrom scipy import stats\n\n# Ensure the correct version of scvi-tools and other dependenc..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Ensure quality control by filtering cells with low counts ..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scipy import stats\n\n# Ensure you have loaded 'adata' before th..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Filter for 'Ciliated' epithelial cells\nadata_ciliated = ad..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport numpy as np\nfrom scipy import stats\n\n# Assume 'adata' is pre-defined as AnnData object\n# Fil..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scipy import stats\n\n# Filter for Ciliated epithelial cells\nada..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\nimport scvi\n\n# Assuming 'adata' is defined somewhere in..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_17.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "# Examine distribution of cell types across datasets\nassert 'cell_type' in adata.obs.columns and 'da..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "# Subset the data to focus on unciliated epithelial cells and stromal fibroblasts within the 10x dat..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Ensure 'day' metadata is correctly for..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n# Subset to foc..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\nimport logging\n\n# Refine gene selec..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport logging\n\n# Assumption: 'adata' anndata object is alre..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport logging\n\n# Assume 'adata' is previously defined, for ..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport logging\n\n# Assume 'adata' is previously defined.\n\n# Prepare ..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_13.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "smooth_muscle_cells = adata[adata.obs['cell_type'].str.strip().str.lower() == 'smooth muscle cells']..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "sc.pp.normalize_total(smooth_muscle_cells, target_sum=1e4)\nsc.pp.log1p(smooth_muscle_cells)\n# Check ..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Running PCA for initial dimensionality reduction\nsc.tl.pca(smooth_muscle_cell..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure adata has a numeric data type\nadata.X = adata.X.astype(float)\n\n# Subs..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure adata has a numeric data type if not already set\nif adata.X.dtype != ..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Subset smooth muscle cells\nsmooth_muscle_cells = adata[adata.obs['cell_type'..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Subset endothelial cells\nendo_cells = adata[adata.obs['cell_type'] == 'Endot..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset endothelial cells\nendo_cells = adata[adata.obs['cell_type..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_24.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\n# Compute basic descriptive statistics for 10x and C1 datasets per cell type\nimport pandas as pd\n\n#..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\n# Differential expression analysis for FAM87B in stromal fibroblasts\nimport scanpy as sc\nimport pan..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Normalize and log-transform the dataset\nsc.pp.normalize_t..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming adata is defined and loaded somewhere earlier i..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scvi\nimport numpy as np\n\n# Note: Assumes 'adata' is defined in the context\n# Train SCVI mode..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\nimport anndata\n\n# Ensure adata is defined and co..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset data for unciliated epithelial cells\nadata_ue = adata[ada..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Ensure adata is defined before proceeding\n# Your code should def..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_11.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Subset to only lymphocytes to investigate immune influences in endometrial ph..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Subset to macrophages to explore immune influences in endometrial physiology\n..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport anndata as ad\nimport numpy as np\n\n# Perform quality control to validate m..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Filter macrophage data to include only high-quality cells\nmacrophage_data = a..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Perform Differential Gene Expression Analysis\n# Focus on macrophages and men..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport anndata\n\n# Load lymphocyte data\n# Assuming adata is already ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Assumed adata is already filtered and preprocessed for quality.\n# Subset lym..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Load and filter lymphocyte data from adata object\nlymphocyte_dat..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_1.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Quality check and basic statistics of immune cells\nimmune..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Correcting lymphocyte identification\nadata.obs['correct_c..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\ndef check_marker_genes(adata, inde..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Filtering out cells with high mitochondrial content and l..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Check if 'adata' is initialized\nassert 'adata' in locals(), \"'adata' not ini..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure adata is defined and contains the required data\nt..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\nimport numpy as np\n\n# Ensure adata ..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport logging\n\n# Ensure lymphocytes are isolated\nimmersed_cells = ..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_25.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport numpy as np\nimport pandas as pd\nunciliated_cells = adata[adata.obs['cell_type'].isin(['Uncil..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import numpy as np\n\n# Extract unciliated epithelial cells for analysis\nunciliated_cells = adata[adat..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\n# Verify and map 'gene_biotype' information using an example gene annotation dataset\nimport scanpy ..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "# Step 1: Identify diverse non-coding RNA regulatory elements\nimport scanpy as sc\nimport numpy as np..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Extract unciliated epithelial cells f..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Extract unciliated epithelial cells f..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Extract unciliated epithelial cells for analysis\nuncilia..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Normalize and logarithmize the data\nadata_raw = adata.copy()\nsc.pp.normalize_..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_18.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport pandas as pd\n\necm_genes = ['COL1A1', 'COL3A1', 'LAMA4', 'FBN1', 'FN1', 'MMP2', 'MMP9']\nadata..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Define ECM genes and filter data by unciliated epithelial..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Conduct pathway enrichment analysis with Scanpy's gene set scoring\nprint('Per..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Perform differential expression analysis of ECM scores across cell types and..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Filter data for stromal fibroblasts and macrophages for l..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Log-transform the raw count data for stromal fibroblasts and unciliated epith..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Select only stromal fibroblasts and unciliated epithelia..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Filter data for unciliated epithelial subtypes 'Unciliate..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_16.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "# Calculate average expression of hormone-responsive genes in ciliated epithelial cells per day of t..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import pandas as pd\nimport scanpy as sc\n\n# Include error handling and library import for robust code..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Ensure preprocessing by inspecting initial data summary\ninitial_summary = ada..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nfrom celltypist import models, annotate\nimport pandas as pd\n\n# Ensure that adat..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport anndata as ad\n\n# Ensure that 'adata' is init..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport pandas as pd\nimport anndata\n\n# Assuming 'ada..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport scvi\nfrom anndata import AnnData\n\n# Assuming 'adata' ..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom anndata import AnnData\n\n# Assuming 'adata' is already initiali..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_5.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "if 'Endothelia' in adata.obs['cell_type'].unique():\n    endothelial_cells = adata[adata.obs['cell_ty..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "if 'Smooth muscle cells' in adata.obs['cell_type'].unique():\n    smooth_muscle_cells = adata[adata.o..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\n# Quality control for smooth muscle cells\ntry:\n    if 'Smooth muscle cells' in adata.obs['cell_type..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\n# Recalculate total counts and perform quality control on smooth muscle cells\nimport numpy as np\n\na..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure qc_filtered_smooth_muscle contains float32 data\nqc..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Ensure proper pre-filtering and quality of qc_filtered_smo..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Isolate stromal fibroblast cells\nstrom..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import spearmanr\n\n# Iso..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_2.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure AnnData object is available in memory\ngene_lists = {'TGF_beta': ['TGF..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Load data, focusing on unciliated epithelial cells\nuncilia..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Focus on stromal fibroblasts\nstromal_adata = adata[adata.obs['cell_type'] == ..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Extract stromal fibroblasts\nstrom..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Filter and focus on smooth muscle..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Load smooth muscle cell data\nsmooth_muscle_adata = adata[adata.o..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import scanpy as sc\nimport scvi\n\n# Initialize SCVI model\nfrom scvi.model import SCVI\n\n# Subset the d..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "import pandas as pd\nimport scvi\nfrom scvi.model import SCVI\n\n# Extract smooth muscle cells\ndata_subs..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_4.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\n\n# Subset the AnnData object for one of the cell types, e.g., stromal fibroblasts.\nadata_stromal = ..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\n# Filter AnnData object for cells with subs..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset the AnnData object for unciliated epithelial cells\n..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scvi\nfrom scvi.model import SCVI\nimport pandas as pd\nimport anndata\n\n# Assuming 'adata' is a..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport anndata\n\n# Generate a sample AnnData object if adata ..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport anndata\n\n# Assuming 'adata' is already in th..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import chi2_contingency\n\n# Assume adata is predefined and load..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Assume adata_unknown is preprocessed; create SCVI latent space if needed\n# S..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_12.ipynb",
      "total_code_cells": 9,
      "successful_cells": 1,
      "failed_cells": 8,
      "success_rate": 0.1111111111111111,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assuming the dataset is already loaded and available as '..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "from scvi.model import SCVI\n\n# Filter data for relevant cell types\nimmune_and_stromal = adata[adata...."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Focused extraction of macrophage subtypes and stromal fibr..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset to focus on macrophage subtypes and stromal fibrobl..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Filter to focus on macrophage subtypes and stromal fibrobl..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Construct k-nearest neighbor graph using SCVI latent representation\ntry:\n    ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import scanpy as sc\nfrom scvi.model import SCVI\n\n# Filter based on specified criteria\ntry:\n    macro..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nfrom scipy.stats import ttest_ind\n\n# Filter macroph..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_23.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom statsmodels.stats.multitest import multipletests\n\n# Ass..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Applying diffusion-based pseudotime analysis\nsmooth_muscl..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Assuming adata is already loaded and availabl..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Assuming adata is already loaded\nsmooth_muscl..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Assuming adata is already loaded\nsmooth_muscl..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\nimport anndata\n\n# Assuming 'adata' is already de..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Assuming 'adata' is already defined and contains the neces..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Assuming 'adata' is already defined and conta..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_6.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset to endothelial cells only\nendothelial_cells = adata[adata.obs['cell_ty..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport pandas as pd\nfrom scipy.stats import pearsonr, zscore\nfrom scipy import stats\nimport numpy a..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is already defined and is an AnnData object with 'day' colu..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport celltypist\nimport scanpy as sc\n\n# Assuming 'endothelial_cells' is already defined and filter..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Assuming 'adata' is already defined in the context. Make sure it..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assume the input data `adata` is already loaded\n\n# Subset to end..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport anndata as ad\n\nadata = ...  # ensure adata is properly defin..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import pearsonr\nimport scvi\n\n# Assuming 'a..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_3.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Filter the dataset to focus on unciliated epithelial cells\nunciliated_epithel..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Filter the dataset to focus on the specific unciliated epithelial cell subty..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Filter the dataset to focus on the specific unciliated epithelial cell subtyp..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\n# Calculate mitochondrial gene metrics\nmt_gene_mask = unciliated_epithelial_cells.var_names.str.sta..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport anndata as ad\n\n# Assuming 'adata' is defined somewhere earli..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Filter the dataset to focus on unciliated epithelial cells\ncell_filter = ['U..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\nimport anndata as ad\nfrom scvi.model import SCVI\n\n..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scvi\n\n# Assuming 'unciliated_epithelial_cells' is already set up and normalized\n\n# Check ava..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_20.ipynb",
      "total_code_cells": 9,
      "successful_cells": 1,
      "failed_cells": 8,
      "success_rate": 0.1111111111111111,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Assuming 'adata' is defined and available in the current workspa..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is defined previously and contains the data.\n\n#..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is defined and contains the data\n\n# Filter and ..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is already defined and contains the data\n\n# Fil..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Filter for specific unciliated epithelial cell subtypes across a..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Ensure anndata is loaded\nadata = sc.datasets.pbmc3k()  # Example..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Ensure SCVI latent representation is calculated\n..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is defined and contains the data\n\n# Filter and ..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_22.ipynb",
      "total_code_cells": 9,
      "successful_cells": 2,
      "failed_cells": 7,
      "success_rate": 0.2222222222222222,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\n# Print the first few rows of the metadata to inspect its structure\nprint(adata.obs.head())\n\n# Prin..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scvi\nfrom scvi.data import setup_anndata\nimport scanpy as sc\n\n# Filter data for stromal fibr..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scvi\nfrom scvi.data import setup_anndata\nimport scanpy as sc\nimport anndata\n\n# Initialize ad..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport anndata\nimport warnings\nimport numpy as np\n\n# Assume 'adata' is already ..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scvi\nfrom scvi.data import setup_anndata\nimport anndata\nimport pandas as pd\nfrom statsmodels..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scvi\nfrom scvi.data import setup_anndata\nimport anndata\n\n# Filter data for endothelial cells..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scvi\nfrom scvi.data import setup_anndata\nimport anndata\nimport warnings\nimport torch\n\n# Ensu..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport anndata as ad\nfrom scipy.stats import chi2_contingency\n\n# Load your spec..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_21.ipynb",
      "total_code_cells": 9,
      "successful_cells": 2,
      "failed_cells": 7,
      "success_rate": 0.2222222222222222,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport numpy as np\nfrom scipy.stats import ranksums\nfrom statsmodels.stats.multitest import fdrcorr..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport anndata\nimport scvi\nimport scvi.data\nimport scanpy as sc\n\n# Filter data for unciliated epith..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport anndata\nimport scvi\nimport scanpy as sc\n\n# Assume 'adata' is pre-loaded or defined earlier i..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport anndata\nimport scanpy as sc\nimport scvi\n\n# Filter for endothelial and macrophage cells exclu..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport anndata\nimport scanpy as sc\n\n# Verify that relevant columns exist\nrequired_columns = ['cell_..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport anndata\nimport scanpy as sc\nimport scvi\n\n# Load and filter previously stored data for endoth..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport anndata\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Assume 'adata' is pre-loaded or d..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport pandas as pd\n\n# Perform differential expression analysis foc..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_9.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\ncell_type_filter = 'Smooth muscle cells'\nfiltered_smooth_muscle_cells = adata[adata.obs['cell_type'..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure filtered smooth muscle cells before differential ..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure 'adata' is defined and is a valid AnnData object\n..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure the AnnData object is defined in memory and has be..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is defined and loaded correctly before this line\n# Check if..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming 'adata' is the AnnData object you're working wi..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport anndata\n\n# Initialize or load your AnnData object here\nadata = anndata.r..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Replace with actual data path\nadata = sc.read_h5ad(\"path..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_7.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import pandas as pd\n\n# Check if the 'day' column exists\nif 'day' in adata.obs.columns:\n    # Subset ..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\n\n# Assuming 'adata' is defined in the current context\n#..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Assuming 'adata' is defined in the current context and already in memory\n\n# F..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "# Step 1: Prepare Data and Fix Data Mismatches\nimport scanpy as sc\n\n# Ensure 'adata' is defined and ..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Assume 'adata' is predefined elsewhere\n# Filtering macrophages and processin..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport anndata as ad\n\n# Assuming `adata` is already..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is defined in the current context and already in memory\n\n# ..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Assuming 'adata' is defined in the current context and already in memory\n\n# F..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_19.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "cell_counts = adata.obs.groupby(['dataset', 'cell_type']).size().reset_index(name='cell_count')\nprin..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\n\n# Assume 'adata' is already loaded\n# Using Harmony for..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assume 'adata' is already loaded and integrated data is s..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assuming 'adata' is pre-loaded\n# Filter endothelial cells..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport scvi\nfrom scvi.data import setup_anndata\n\n# ..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scvi.data import setup_anndata\nfrom sklearn.metrics import sil..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Filter unciliated epithelial cells\nadata_ue = adata[adata.obs['c..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport pandas as pd\nimport numpy as np\n\n# Ensure the data focuses o..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_14.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset to stromal fibroblasts within adata\nstromal_cells = adata[adata.obs['..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Subset to stromal fibroblasts within ..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Load and preprocess the data\nprint(\"Pr..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\n\n# Dummy lists o..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Documenting purpose of libraries\n# scanpy is used for sing..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset to stromal fibroblasts\nstromal_cells = adata[adata.obs['cell_type'] ==..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport pandas as pd\nimport anndata as ad\n\n# Subset to stromal fibro..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\n\n# Subset to stro..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_8.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Define canonical cell-cycle genes for..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Focus analysis on stromal fibroblasts\n..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Define 'adata' before using it\n# Assuming 'adata' is alre..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure 'adata' is normalized or contains floating point data\nadata.X = adata..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset data to include only endothelial and stromal fibroblast cells.\nadata_e..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Make a copy to preserve raw counts\nadata_copy = adata_endothelial_stromal.cop..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Ensure 'leiden' is a viable group-by variable\nif 'leiden' in adata.obs:\n    #..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset data to obtain endothelial cells filtered on pseudotime\nadata_filtered..."
        }
      ]
    }
  ],
  "errors": []
}