{
  "test_name": "baseline_20250810",
  "total_code_cells_attempted": 130,
  "total_failures": 93,
  "final_successful_cells": 33,
  "final_failed_cells": 21,
  "failure_rate": 0.7153846153846154,
  "final_success_rate": 0.6111111111111112,
  "failed_fix_attempts_per_step": {
    "endo_ablation_081025/test_results_baseline_20250810_005316/logs/test_baseline_log_20250810_005336.log": {
      "1": {
        "1": 1,
        "2": 2,
        "3": 1,
        "4": 1,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 3
      },
      "2": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 3,
        "6": 0,
        "7": 2,
        "8": 0
      },
      "3": {
        "1": 0,
        "2": 3,
        "3": 1,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
      },
      "4": {
        "1": 3,
        "2": 3,
        "3": 0,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "5": {
        "1": 0,
        "2": 3,
        "3": 3,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 1,
        "8": 3
      },
      "6": {
        "1": 3,
        "2": 2,
        "3": 0,
        "4": 0,
        "5": 3,
        "6": 1,
        "7": 3,
        "8": 3
      },
      "7": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0
      }
    }
  },
  "analyses": [
    {
      "notebook_path": "endo_ablation_081025/test_results_baseline_20250810_005316/outputs/test_baseline_20250810_005336/test_baseline_analysis_6.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport pandas as pd\n\n# Curated lists of ligands and receptors specific to stromal fibroblasts and e..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport pandas as pd\nimport numpy as np\n\n# Curated lists of ligands and receptors specific to stroma..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import pandas as pd\nimport numpy as np\n\n# Enhanced lists of ligands and receptors considering broade..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "# Validation of known cell markers for specificity and sensitivity\nimport scanpy as sc\nfrom sklearn...."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import rankdata\n\n# Identify differentially..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\n\n# Define..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Preprocessing steps\nadata = adata.copy()  # Do not modify original data\nsc.p..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Assuming 'adata' is defined earlier i..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_081025/test_results_baseline_20250810_005316/outputs/test_baseline_20250810_005336/test_baseline_analysis_5.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Define a list of ligand and receptor ..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Assuming 'adata' is already defined a..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Assuming 'adata' is already defined a..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Preprocess data to focus on macrophage..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Load existing preprocesse..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Assuming adata_subtypes is..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Identify differentially expressed gen..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scvi.model import SCVI\n\n# Ensure th..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_081025/test_results_baseline_20250810_005316/outputs/test_baseline_20250810_005336/test_baseline_analysis_1.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Filter the data to only include ciliated epi..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport celltypist\n\n# Load and filter the data\nadata_ciliated = adata[adata.obs[..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Filter dataset for ciliated epithelial cells\nadata_ciliated = adata[adata.ob..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Filter the dataset to focus on ciliated epithelial cells\nadata_ciliated = ad..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Filter the dataset to focus on ciliated epithelial cells\nadata_ciliated = ada..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Filter the dataset to focus on ciliated epithelial cells\n..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Filter for ciliated epithelial cells\nadata_ciliated = adat..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure 'adata' is defined before proceeding. This might be loaded from a fil..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_081025/test_results_baseline_20250810_005316/outputs/test_baseline_20250810_005336/test_baseline_analysis_4.ipynb",
      "total_code_cells": 9,
      "successful_cells": 2,
      "failed_cells": 7,
      "success_rate": 0.2222222222222222,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\n# Step 1: Classify lymphocyte subtypes using CellTypist\nimport celltypist\nimport pandas as pd\nimpor..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\n# Quality control filtering and immune subtype classification\nimport scanpy as sc\nimport numpy as n..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "# Correct approach to recalculate 'pct_counts_mt' dynamically before mitochondrial filtering\nimport ..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set up visualization d..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scvi\nimport anndata\nimport scanpy as sc\n\n# Convert adata to a suitable fo..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Check GPU availability and adjust neighborhood graph method\ntry:\n    import ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Filter only endothelial cells for analysis\nen..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Load your data here\nadata = sc.read_h5ad('your_correct_data_path..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_081025/test_results_baseline_20250810_005316/outputs/test_baseline_20250810_005336/test_baseline_analysis_3.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Define gene sets for estrogen and progesterone response\nestrogen_genes = ['E..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\n\n# Ensure 'day' column in obs is of type 'category..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\n# Ensure numpy is imported\nimport numpy as np\nimport scanpy as sc\n\n# Filter unciliated epithelial c..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "# Import necessary libraries\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "# Differential Expression Analysis on Smooth Muscle Cells\nimport scanpy as sc\n\n# Filter smooth muscl..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "# Trajectory and Pseudotime Analysis on Endothelial Cells\nimport scanpy as sc\n\n# Filter endothelial ..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "# Import necessary libraries\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Subset st..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_081025/test_results_baseline_20250810_005316/outputs/test_baseline_20250810_005336/test_baseline_analysis_2.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "# First, subset the AnnData object to contain only macrophage cells\nmacrophages = adata[adata.obs['c..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Ensure clustering information is present\nsc.tl.leiden(macrophages, resolution..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset the AnnData object to contain only macrophage cells\nmacrophages = adat..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Subset the macrophages and..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is already defined somewhere in the code\n\n# Ensure data typ..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset macrophage cells from the AnnData object\nmacrophages = adata[adata.obs..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import krus..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Subset macrophage cells f..."
        }
      ]
    }
  ],
  "errors": []
}