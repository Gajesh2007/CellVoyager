{
  "test_name": "baseline_20250807",
  "total_code_cells_attempted": 356,
  "total_failures": 276,
  "final_successful_cells": 88,
  "final_failed_cells": 65,
  "failure_rate": 0.7752808988764045,
  "final_success_rate": 0.5751633986928104,
  "failed_fix_attempts_per_step": {
    "endo_ablation_080725/test_results_baseline_20250807_122806/logs/test_baseline_log_20250807_122827.log": {
      "1": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 3,
        "5": 3,
        "6": 0,
        "7": 3,
        "8": 3
      },
      "2": {
        "1": 1,
        "2": 0,
        "3": 2,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 3
      },
      "3": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
      },
      "4": {
        "1": 0,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 0,
        "6": 0,
        "7": 3,
        "8": 3
      },
      "5": {
        "1": 0,
        "2": 0,
        "3": 1,
        "4": 0,
        "5": 0,
        "6": 3,
        "7": 3,
        "8": 0
      },
      "6": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "7": {
        "1": 3,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "8": {
        "1": 0,
        "2": 3,
        "3": 0,
        "4": 3,
        "5": 0,
        "6": 0,
        "7": 1,
        "8": 3
      },
      "9": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 3,
        "5": 0,
        "6": 0,
        "7": 1,
        "8": 3
      },
      "10": {
        "1": 1,
        "2": 3,
        "3": 3,
        "4": 0,
        "5": 0,
        "6": 1,
        "7": 0,
        "8": 0
      },
      "11": {
        "1": 3,
        "2": 1,
        "3": 3,
        "4": 0,
        "5": 0,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "12": {
        "1": 0,
        "2": 0,
        "3": 1,
        "4": 1,
        "5": 0,
        "6": 1,
        "7": 3,
        "8": 0
      },
      "13": {
        "1": 3,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
      },
      "14": {
        "1": 0,
        "2": 3,
        "3": 0,
        "4": 0,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "15": {
        "1": 3,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 3,
        "8": 3
      },
      "16": {
        "1": 0,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 0,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "17": {
        "1": 0,
        "2": 0,
        "3": 3,
        "4": 1,
        "5": 0,
        "6": 3,
        "7": 0,
        "8": 0
      }
    }
  },
  "analyses": [
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_14.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "# Ensure 'cell_type' column exists before subsetting\nif 'cell_type' in adata.obs.columns:\n    # Subs..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure we're only dealing with endothelial c..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Filter for endothelial cells\nendothelial_cel..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensuring case-insensitivity when filtering en..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport scvi\nimport anndata\n\n# Ensure you have t..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport scvi\nimport seaborn as sns\n\n# Set a defa..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Ensure we're only dealing..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure we're only dealing with endoth..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_7.ipynb",
      "total_code_cells": 9,
      "successful_cells": 1,
      "failed_cells": 8,
      "success_rate": 0.1111111111111111,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Clustering lymphocyte populations\nlymph_data = adata[adata.obs['cell_type'] ..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Preliminary setup for scVI\nscvi.model.SCVI.setup_anndata(lymph_d..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Initial processing of lymphocyte data\nlymph_data = adata[adata.obs['cell_typ..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Alternative initial preprocessing of lymphocyte data\nlymp..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Initial processing of endothelial cell data\nendothelial_data = adata[adata.o..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Assumed adata is previously loaded in context \n\n# Load and preprocess the en..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport anndata\n\n# Initial processing and preparation for scVI\n# Che..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming 'adata' is de..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_16.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset the AnnData object to target lymphocytes\nadata_lymphocytes = adata[ada..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scanpy as sc\n\n# Reshape if necessary and ensure data is in an ndarray for..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport scvi\n\n# Initialize and train the SCVI model\nscvi.mode..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport scvi\n\n# Ensure adata is correctly formatted for SCVI\n..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Verify the 'cell_type' column\nif 'cell_type' not in adata.obs.columns:\n    ra..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Initialize and train the SCVI model\nscvi.model.SCVI.setup_anndat..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport scvi\n\n# Re-initialize SCVI model specifically for lym..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport scvi\n\n# Re-initialize SCVI model for lymphocyte data\n..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_6.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Perform initial quality control\nadata.var['m..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Calculate quality control metrics\nadata.var['mt'] = adata.var_names.str.star..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Normalize and log-transform the filtered data\nsc.pp.normalize_total(adata, ta..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset the data to focus on unciliated epithelial and lymphocyte subtypes\nada..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset the data to focus on unciliated epithelia and lymphocyte subtypes\nada..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is already defined and loaded previously in the code.\n\n# Co..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Subset the data to focus only on unciliated epithelial cells\nadata_epithelia..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Subset and focus on unciliated epithelial cells,..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_5.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Focus on lymphocyte data subset\nadata_l = adata[adata.obs['cell_type'] == 'Ly..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset data to only lymphocytes\nadata_l = adata[adata.obs['cell_type'] == 'L..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset data to lymphocytes and consider the 'day' metadata\nadata_l = adata[a..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Subset data to lymphocytes and n..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset data to unciliated epithelial cells and normalize\nadata_e = adata[adat..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Prepare unciliated epithelial cells data\nadata_e..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is already loaded and counts are non-negative i..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset data for unciliated epithelial cells and lymphocytes\nadata_ue = adata..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_13.ipynb",
      "total_code_cells": 9,
      "successful_cells": 1,
      "failed_cells": 8,
      "success_rate": 0.1111111111111111,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scvi\nimport anndata\n\n# Fix the logging setup before initializing the model\nscvi.settings.pro..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Normalize and preprocess the data\nsc.pp.normalize_total(adata, t..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Normalize and preprocess the data\nsc.pp.normalize_total(adata, t..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Normalize and preprocess\nsc.pp.normalize_total(adata, target_sum..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scanpy as sc\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn...."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Ensure raw count data is in the correct layer for further ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import scanpy as sc\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\n# Filter cells for 'Uncil..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "import scanpy as sc\nimport scvi\nimport numpy as np\n\n# Normalize and preprocess\nsc.pp.normalize_total..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_10.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport anndata as ad\n\n# Subsetting the data to only include endothelial cells\ne..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport logging\nimport scvi\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\n\nendothelial_ce..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport anndata as ad\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Subs..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Verify numpy is imported and dtype conversion\nif not np.i..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset the data to contain both smooth muscle cells and en..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subset the data to contain both smooth muscle cells and e..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subsetting the data to only include endothelial cells\nend..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Assuming endothelial_cell..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_1.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Step 1: Preprocessing for PCA\nsc.pp.normalize_total(adata, target_sum=1e4)\nsc..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Normalize and log-transform the data\nsc.pp.normalize_total(adata, target_sum=..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Focus on unciliated epithelia and macrophages\nuce_mac_data = adata[adata.obs..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is already defined and processed with clustering\n# Filter d..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Preparing the AnnData for scVI while ensuring efficient memory u..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Apply batch effect correction using ComBat from Scanpy\nadata.obs['batch'] = a..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Set up the scvi model for the latent space computation\nscvi.mode..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport anndata\n\n# Assuming 'adata' is predefined somewhere in your ..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_9.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Preprocess the data by normalizing and log-transforming\nsc.pp.normalize_total..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Ensure the data is preprocessed before clustering\nsc.pp.normalize_total(adata..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Characterize clusters with top marker genes\nsc.tl.rank_ge..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure neighbor graph is computed for Leiden clustering\nsc.pp.neighbors(adat..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Preprocess the data by normalizing and log-transforming\nd..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Validate clustering by characterizing clusters with known marker genes\nsc.tl...."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Dynamically select clusters for pathway enrichment analy..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Use PAGA to infer the topology and explore dynamics via p..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_17.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure the input data X is of float type\nada..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\n\n# Construct k-nearest neighbors graph using diffu..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\n# Import necessary libraries\nimport scvi\nimport scanpy as sc\n\n# Prepare the AnnData for SCVI\nscvi.d..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\nimport numpy as np\n\n# Assume adata is previously d..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "# Import necessary libraries\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\n\n# Perform pseudotime analysis using diffusion map..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "# Import necessary libraries\nimport scanpy as sc\n\n# Define subgroups of interest\ncell_types_of_inter..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as pl..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_4.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Define a list of mitochondrial genes\nmt_gene..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Calcu..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scanpy as sc\n\n# Assuming 'adata' is already defined in the context\n\n# Pre..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Filter data specifically for stromal fibroblasts and epit..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Filter anndata for known mitochondrial genes in the literature specifically r..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Normalize, scale, and perform PCA on mitochondrial genes\nadata_mito = adata[:..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom sklearn.metrics import silhouette_score\n\n# Perform nece..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom scipy.stats import f_oneway\n\n# Assuming 'adata' is defi..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_8.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Score the cell cycle phase for all cells, focusing on smooth muscle cells\ns_..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport anndata\n\n# Setup Anndata with correct object 'adata'\nadata =..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Isolate smooth muscle cells\nsmooth_muscle_cells = adata[a..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Ensure reprod..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Isolate smooth muscle cells for analysis\nsmooth_muscle_cells = adata[adata.ob..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Isolate smooth muscle cells for analysis\nsmooth_muscle_cells = adata[adata.o..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Isolate smooth muscle cells for analysis\nsmooth_muscle_cells = adata[adata.o..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Isolate smooth muscle cells for analysis\nsmooth_muscle_cells = adata[adata.o..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_3.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# As..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\nadata.X = adata.X.astype(float)  # Ensure the ..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Ensure preprocessing steps are complete\nsc.pp.scale(adata)\nsc.tl.pca(adata, s..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "### Enhanced Cluster Validation and Annotation using Differential Expression Analysis\nimport scanpy ..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "import scanpy as sc\nimport numpy as np\nfrom gprofiler import GProfiler\n\ndata = sc.read_h5ad('YOUR_PA..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Abstract the database path for reusabi..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import pandas as pd\nfrom scipy.stats import f_oneway\nfrom statsmodels.stats.multitest import multipl..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Filter dataset for stromal fibroblasts and ciliated epithelium\nsub_adata = ad..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_12.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\nimport numpy as np\n\n# Assuming 'adata' is already ..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n# Assuming neighborhood graph is already constructed correctly\nsc.tl.leiden(adat..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Perform marker gene analysis for each cluster, focusing ..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure the data is properly log-transformed\nsc.pp.log1p(a..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Analyze smooth muscle and macrophage clusters\nsub_adata = adata[adata.obs['c..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Filter data to ensure quality cells and sufficient gene c..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Setup the ann..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subset to smooth muscle cells and macrophages based on hy..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_11.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Pre..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Cre..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Refine data variable name for readability\nadata_se = adat..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Remove existing low-variability genes and normalize the data\nsc.pp.highly_var..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Preprocess the data\nsc.pp.normalize_total(adata, target_sum=1e4)\nsc.pp.log1p(..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np  # Make sure numpy is imported\n\n# Assume the existence of a ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Preprocess data\nsc.pp.normalize_total(adata, tar..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom anndata import AnnData\n\n# Example code to define 'adata..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_15.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Quality control for lymphocytes\n# Calculate initial quality metrics\nsc.pp.ca..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure mitochondrial genes are annotated correctly\nadata.var['mito'] = adata..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Normalize and scale data for lymphocytes\nadata_lymphocytes = adata[adata.obs..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure normalized and scaled data for lymphocytes\nsc.pp.n..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc; import numpy as np\n\n# Ensure quality metrics and preprocessing\nadata.var['mito'..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Annotate clusters with known immune marker genes\nmarker_genes = {'B_cells': ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Subset lymphocytes data\nadata_lymphocytes = adata[adata.obs['cell_type'] == ..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Setup anndata object for scVI\nscvi.model.SCVI.setup_anndata(adat..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_2.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nfrom scipy.stats import ttest_ind\n\n# Ensure ada..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Perform PCA for dimensionality reduction\ntry:\n    sc.tl.pca(stromal_fibroblas..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Load and preprocess the data\nprint('Loading data...')\nada..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Ensure data is properly normalized\nsc.pp.normalize_total(s..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Determine the optimal number of principal components for each cell type usin..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Assuming adata is already defined and contains the data\n\n# Focus on stromal ..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Ensure data is properly normalized and log-transformed, focusing only on stro..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure data is properly normalized and log-transformed\nsc..."
        }
      ]
    }
  ],
  "errors": []
}