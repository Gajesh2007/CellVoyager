{
  "timestamp": "2025-08-08T09:28:28.933923",
  "summary": {
    "baseline_20250807": {
      "final_success_rate": 0.5751633986928104,
      "total_failure_rate": 0.7752808988764045,
      "final_successful_cells": 88,
      "final_failed_cells": 65,
      "total_failures": 276,
      "total_attempts": 356,
      "num_analyses": 17
    },
    "no_critique_20250807": {
      "final_success_rate": 0.6844444444444444,
      "total_failure_rate": 0.7066381156316917,
      "final_successful_cells": 154,
      "final_failed_cells": 71,
      "total_failures": 330,
      "total_attempts": 467,
      "num_analyses": 25
    },
    "no_vlm_20250807": {
      "final_success_rate": 0.5111111111111111,
      "total_failure_rate": 0.7858508604206501,
      "final_successful_cells": 115,
      "final_failed_cells": 110,
      "total_failures": 411,
      "total_attempts": 523,
      "num_analyses": 25
    },
    "no_vlm_no_critique_20250807": {
      "final_success_rate": 0.6388888888888888,
      "total_failure_rate": 0.6751592356687898,
      "final_successful_cells": 46,
      "final_failed_cells": 26,
      "total_failures": 106,
      "total_attempts": 157,
      "num_analyses": 8
    }
  },
  "detailed_results": {
    "baseline_20250807": {
      "test_name": "baseline_20250807",
      "total_code_cells_attempted": 356,
      "total_failures": 276,
      "final_successful_cells": 88,
      "final_failed_cells": 65,
      "failure_rate": 0.7752808988764045,
      "final_success_rate": 0.5751633986928104,
      "failed_fix_attempts_per_step": {
        "endo_ablation_080725/test_results_baseline_20250807_122806/logs/test_baseline_log_20250807_122827.log": {
          "1": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 0,
            "7": 3,
            "8": 3
          },
          "2": {
            "1": 1,
            "2": 0,
            "3": 2,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 3
          },
          "3": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "4": {
            "1": 0,
            "2": 3,
            "3": 3,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 3
          },
          "5": {
            "1": 0,
            "2": 0,
            "3": 1,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 0
          },
          "6": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "7": {
            "1": 3,
            "2": 3,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "8": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 1,
            "8": 3
          },
          "9": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 1,
            "8": 3
          },
          "10": {
            "1": 1,
            "2": 3,
            "3": 3,
            "4": 0,
            "5": 0,
            "6": 1,
            "7": 0,
            "8": 0
          },
          "11": {
            "1": 3,
            "2": 1,
            "3": 3,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "12": {
            "1": 0,
            "2": 0,
            "3": 1,
            "4": 1,
            "5": 0,
            "6": 1,
            "7": 3,
            "8": 0
          },
          "13": {
            "1": 3,
            "2": 3,
            "3": 3,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "14": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "15": {
            "1": 3,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 3
          },
          "16": {
            "1": 0,
            "2": 3,
            "3": 3,
            "4": 3,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "17": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 1,
            "5": 0,
            "6": 3,
            "7": 0,
            "8": 0
          }
        }
      },
      "analyses": [
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_14.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "# Ensure 'cell_type' column exists before subsetting\nif 'cell_type' in adata.obs.columns:\n    # Subs..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure we're only dealing with endothelial c..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Filter for endothelial cells\nendothelial_cel..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensuring case-insensitivity when filtering en..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport scvi\nimport anndata\n\n# Ensure you have t..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport scvi\nimport seaborn as sns\n\n# Set a defa..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Ensure we're only dealing..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure we're only dealing with endoth..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_7.ipynb",
          "total_code_cells": 9,
          "successful_cells": 1,
          "failed_cells": 8,
          "success_rate": 0.1111111111111111,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Clustering lymphocyte populations\nlymph_data = adata[adata.obs['cell_type'] ..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Preliminary setup for scVI\nscvi.model.SCVI.setup_anndata(lymph_d..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Initial processing of lymphocyte data\nlymph_data = adata[adata.obs['cell_typ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Alternative initial preprocessing of lymphocyte data\nlymp..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Initial processing of endothelial cell data\nendothelial_data = adata[adata.o..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assumed adata is previously loaded in context \n\n# Load and preprocess the en..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport anndata\n\n# Initial processing and preparation for scVI\n# Che..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming 'adata' is de..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_16.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset the AnnData object to target lymphocytes\nadata_lymphocytes = adata[ada..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\n\n# Reshape if necessary and ensure data is in an ndarray for..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport scvi\n\n# Initialize and train the SCVI model\nscvi.mode..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport scvi\n\n# Ensure adata is correctly formatted for SCVI\n..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Verify the 'cell_type' column\nif 'cell_type' not in adata.obs.columns:\n    ra..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Initialize and train the SCVI model\nscvi.model.SCVI.setup_anndat..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport scvi\n\n# Re-initialize SCVI model specifically for lym..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport scvi\n\n# Re-initialize SCVI model for lymphocyte data\n..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_6.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Perform initial quality control\nadata.var['m..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Calculate quality control metrics\nadata.var['mt'] = adata.var_names.str.star..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Normalize and log-transform the filtered data\nsc.pp.normalize_total(adata, ta..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset the data to focus on unciliated epithelial and lymphocyte subtypes\nada..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset the data to focus on unciliated epithelia and lymphocyte subtypes\nada..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is already defined and loaded previously in the code.\n\n# Co..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Subset the data to focus only on unciliated epithelial cells\nadata_epithelia..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Subset and focus on unciliated epithelial cells,..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_5.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Focus on lymphocyte data subset\nadata_l = adata[adata.obs['cell_type'] == 'Ly..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset data to only lymphocytes\nadata_l = adata[adata.obs['cell_type'] == 'L..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset data to lymphocytes and consider the 'day' metadata\nadata_l = adata[a..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Subset data to lymphocytes and n..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data to unciliated epithelial cells and normalize\nadata_e = adata[adat..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Prepare unciliated epithelial cells data\nadata_e..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is already loaded and counts are non-negative i..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset data for unciliated epithelial cells and lymphocytes\nadata_ue = adata..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_13.ipynb",
          "total_code_cells": 9,
          "successful_cells": 1,
          "failed_cells": 8,
          "success_rate": 0.1111111111111111,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scvi\nimport anndata\n\n# Fix the logging setup before initializing the model\nscvi.settings.pro..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Normalize and preprocess the data\nsc.pp.normalize_total(adata, t..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Normalize and preprocess the data\nsc.pp.normalize_total(adata, t..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Normalize and preprocess\nsc.pp.normalize_total(adata, target_sum..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn...."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Ensure raw count data is in the correct layer for further ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import scanpy as sc\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\n# Filter cells for 'Uncil..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "import scanpy as sc\nimport scvi\nimport numpy as np\n\n# Normalize and preprocess\nsc.pp.normalize_total..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_10.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport anndata as ad\n\n# Subsetting the data to only include endothelial cells\ne..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport logging\nimport scvi\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\n\nendothelial_ce..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport anndata as ad\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Subs..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Verify numpy is imported and dtype conversion\nif not np.i..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset the data to contain both smooth muscle cells and en..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subset the data to contain both smooth muscle cells and e..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subsetting the data to only include endothelial cells\nend..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Assuming endothelial_cell..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_1.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 1: Preprocessing for PCA\nsc.pp.normalize_total(adata, target_sum=1e4)\nsc..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Normalize and log-transform the data\nsc.pp.normalize_total(adata, target_sum=..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Focus on unciliated epithelia and macrophages\nuce_mac_data = adata[adata.obs..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is already defined and processed with clustering\n# Filter d..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Preparing the AnnData for scVI while ensuring efficient memory u..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Apply batch effect correction using ComBat from Scanpy\nadata.obs['batch'] = a..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Set up the scvi model for the latent space computation\nscvi.mode..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport anndata\n\n# Assuming 'adata' is predefined somewhere in your ..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_9.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Preprocess the data by normalizing and log-transforming\nsc.pp.normalize_total..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure the data is preprocessed before clustering\nsc.pp.normalize_total(adata..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Characterize clusters with top marker genes\nsc.tl.rank_ge..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure neighbor graph is computed for Leiden clustering\nsc.pp.neighbors(adat..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Preprocess the data by normalizing and log-transforming\nd..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Validate clustering by characterizing clusters with known marker genes\nsc.tl...."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Dynamically select clusters for pathway enrichment analy..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Use PAGA to infer the topology and explore dynamics via p..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_17.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure the input data X is of float type\nada..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\n\n# Construct k-nearest neighbors graph using diffu..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\n# Import necessary libraries\nimport scvi\nimport scanpy as sc\n\n# Prepare the AnnData for SCVI\nscvi.d..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\nimport numpy as np\n\n# Assume adata is previously d..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "# Import necessary libraries\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\n\n# Perform pseudotime analysis using diffusion map..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "# Import necessary libraries\nimport scanpy as sc\n\n# Define subgroups of interest\ncell_types_of_inter..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as pl..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_4.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Define a list of mitochondrial genes\nmt_gene..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Calcu..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\n\n# Assuming 'adata' is already defined in the context\n\n# Pre..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Filter data specifically for stromal fibroblasts and epit..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Filter anndata for known mitochondrial genes in the literature specifically r..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Normalize, scale, and perform PCA on mitochondrial genes\nadata_mito = adata[:..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom sklearn.metrics import silhouette_score\n\n# Perform nece..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom scipy.stats import f_oneway\n\n# Assuming 'adata' is defi..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_8.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Score the cell cycle phase for all cells, focusing on smooth muscle cells\ns_..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport anndata\n\n# Setup Anndata with correct object 'adata'\nadata =..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Isolate smooth muscle cells\nsmooth_muscle_cells = adata[a..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Ensure reprod..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Isolate smooth muscle cells for analysis\nsmooth_muscle_cells = adata[adata.ob..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Isolate smooth muscle cells for analysis\nsmooth_muscle_cells = adata[adata.o..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Isolate smooth muscle cells for analysis\nsmooth_muscle_cells = adata[adata.o..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Isolate smooth muscle cells for analysis\nsmooth_muscle_cells = adata[adata.o..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_3.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# As..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\nadata.X = adata.X.astype(float)  # Ensure the ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure preprocessing steps are complete\nsc.pp.scale(adata)\nsc.tl.pca(adata, s..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "### Enhanced Cluster Validation and Annotation using Differential Expression Analysis\nimport scanpy ..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "import scanpy as sc\nimport numpy as np\nfrom gprofiler import GProfiler\n\ndata = sc.read_h5ad('YOUR_PA..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Abstract the database path for reusabi..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import pandas as pd\nfrom scipy.stats import f_oneway\nfrom statsmodels.stats.multitest import multipl..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Filter dataset for stromal fibroblasts and ciliated epithelium\nsub_adata = ad..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_12.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\nimport numpy as np\n\n# Assuming 'adata' is already ..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n# Assuming neighborhood graph is already constructed correctly\nsc.tl.leiden(adat..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Perform marker gene analysis for each cluster, focusing ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure the data is properly log-transformed\nsc.pp.log1p(a..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Analyze smooth muscle and macrophage clusters\nsub_adata = adata[adata.obs['c..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Filter data to ensure quality cells and sufficient gene c..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Setup the ann..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subset to smooth muscle cells and macrophages based on hy..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_11.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Pre..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Cre..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Refine data variable name for readability\nadata_se = adat..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Remove existing low-variability genes and normalize the data\nsc.pp.highly_var..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Preprocess the data\nsc.pp.normalize_total(adata, target_sum=1e4)\nsc.pp.log1p(..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np  # Make sure numpy is imported\n\n# Assume the existence of a ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Preprocess data\nsc.pp.normalize_total(adata, tar..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom anndata import AnnData\n\n# Example code to define 'adata..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_15.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Quality control for lymphocytes\n# Calculate initial quality metrics\nsc.pp.ca..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure mitochondrial genes are annotated correctly\nadata.var['mito'] = adata..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Normalize and scale data for lymphocytes\nadata_lymphocytes = adata[adata.obs..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure normalized and scaled data for lymphocytes\nsc.pp.n..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc; import numpy as np\n\n# Ensure quality metrics and preprocessing\nadata.var['mito'..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Annotate clusters with known immune marker genes\nmarker_genes = {'B_cells': ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Subset lymphocytes data\nadata_lymphocytes = adata[adata.obs['cell_type'] == ..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Setup anndata object for scVI\nscvi.model.SCVI.setup_anndata(adat..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_baseline_20250807_122806/outputs/test_baseline_20250807_122827/test_baseline_analysis_2.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nfrom scipy.stats import ttest_ind\n\n# Ensure ada..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform PCA for dimensionality reduction\ntry:\n    sc.tl.pca(stromal_fibroblas..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Load and preprocess the data\nprint('Loading data...')\nada..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Ensure data is properly normalized\nsc.pp.normalize_total(s..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Determine the optimal number of principal components for each cell type usin..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming adata is already defined and contains the data\n\n# Focus on stromal ..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure data is properly normalized and log-transformed, focusing only on stro..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure data is properly normalized and log-transformed\nsc..."
            }
          ]
        }
      ],
      "errors": []
    },
    "no_critique_20250807": {
      "test_name": "no_critique_20250807",
      "total_code_cells_attempted": 467,
      "total_failures": 330,
      "final_successful_cells": 154,
      "final_failed_cells": 71,
      "failure_rate": 0.7066381156316917,
      "final_success_rate": 0.6844444444444444,
      "failed_fix_attempts_per_step": {
        "endo_ablation_080725/test_results_no_critique_20250807_122802/logs/test_no_critique_log_20250807_122821.log": {
          "1": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 0
          },
          "2": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 1,
            "8": 0
          },
          "3": {
            "1": 1,
            "2": 0,
            "3": 3,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "4": {
            "1": 0,
            "2": 0,
            "3": 2,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 3
          },
          "5": {
            "1": 0,
            "2": 1,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "6": {
            "1": 3,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "7": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "8": {
            "1": 0,
            "2": 0,
            "3": 2,
            "4": 3,
            "5": 1,
            "6": 0,
            "7": 0,
            "8": 2
          },
          "9": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "10": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "11": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 1
          },
          "12": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 1,
            "7": 1,
            "8": 3
          },
          "13": {
            "1": 0,
            "2": 3,
            "3": 2,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 3
          },
          "14": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "15": {
            "1": 2,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 2,
            "8": 3
          },
          "16": {
            "1": 3,
            "2": 0,
            "3": 3,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "17": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 0,
            "8": 0
          },
          "18": {
            "1": 1,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 1
          },
          "19": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "20": {
            "1": 3,
            "2": 0,
            "3": 3,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 3
          },
          "21": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 1
          },
          "22": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 0,
            "7": 0,
            "8": 3
          },
          "23": {
            "1": 0,
            "2": 1,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "24": {
            "1": 0,
            "2": 1,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "25": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          }
        }
      },
      "analyses": [
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_5.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure 'day' column is categorical\nadata.obs..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure that `adata` has been processed corre..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Annotate the clusters using known markers\nmarker_genes = {\n    'Stromal fibro..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Ass..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n# Compute the diffusion map embeddings\nsc.tl.diffmap(adata)\n# Visualize the diff..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming diffusion map is computed\nsc.tl.dpt(adata, n_dcs=10, min_group_size..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.data import setup_anndata\nfrom scvi.model import SCVI\n\n# Assuming 'ad..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom scvi.model import SCVI..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_3.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure mitochondrial genes are annotated\nada..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure the data is of floating type\nadata.X = adata.X.astype(float)\n\n# Compu..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Set up pseudotime trajectory analysis\nsc.tl.dpt(data_subset, n_dcs=10, min_g..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset data for unciliated epithelial cells\nepithelial_cells = adata[adata.o..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Load required data subset\nmac_and_smooth = adata[adata.obs['cell_type'].isin..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Focus on stromal fibroblasts\nstromal_fibroblasts = adata[adata.o..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Focus on ciliated cells\nciliated_cells = adata[adata.obs['cell_t..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming `adata` is already loaded and preprocessed.\n\n# Subset f..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_25.ipynb",
          "total_code_cells": 9,
          "successful_cells": 2,
          "failed_cells": 7,
          "success_rate": 0.2222222222222222,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset the data to only include stromal fibr..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Perform clustering using the Leiden algorith..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "import scanpy as sc\nimport gseapy as gp\nimport pandas as pd\n\n# Subset the data to only include strom..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Perform differential expression analysis on stromal fibr..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Filter and normalize stromal fibroblast data\nstromal_adata = adata[adata.obs[..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Subset stromal fibroblast data\nstromal_adata = adata[adata.obs['cell_type'] =..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Load necessary packages and prepare data\nstro..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "import scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sub..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_8.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Define a list of metabolic pathway genes (example pathwa..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Extract unciliated epithel..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport s..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure data is of floating or complex floating data type before computing ne..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Filter lymphocytes data\nlymphocytes_mask = adata.obs['cell_type'] == 'Lympho..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform differential expression analysis for lymphocyte clusters\nsc.tl.rank_g..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Log-transform the data\nsc.pp.log1p(lymphocytes_data)\n\n# Re-run differential e..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Filter data for smooth muscle cells\nsmooth_muscle_mask = adata.obs['cell_typ..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_23.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure data is of floating type\nadata.X = ad..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport numpy as np\n\n# Calculate Coefficient of Variation (CV) for each gene within smooth muscle ce..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nsc.tl.rank_genes_groups(adata, 'cell_type', method='wilcoxon')\nsc.pl.rank_genes_..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Log transform the data\nsc.pp.log1p(adata)\n\n# Rerun differe..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport numpy as np\n\n# Subset the anndata object for unciliated epithelial cells\nunciliated_epitheli..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Load your Anndata object (example with dummy data for context, ensure your d..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport numpy as np\n\n# Subset the anndata object for unciliated epithelial cells\nunciliated_epitheli..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure unciliated_epithelial_cells is a valid AnnData obj..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_9.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Select transporters for expression examination\ntransporters = ['SLC5A1', 'SL..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Apply log transformation\nsc.pp.log1p(adata, base=2)\n\n# Verify variance stabil..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform differential expression analysis on identified clusters from UMAP\n# ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scvi\n\n# Set up and train scVI model\nscvi.data.setup_anndata(adata, batch_key='donor', labels..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport torch\n\n# Assuming `adata` is already loaded and contains the..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming the model setup and training has been done previously:\n..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assume that the Scanpy AnnData object 'adata' has already been s..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport numpy as np\n\n# Ensure you are using compatible versions of s..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_15.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure adata.X is a float data type\nadata.X ..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform Leiden clustering to identify distinct clusters within the UMAP plot\n..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Annotate clusters using known markers to identify major cell types\nmarker_gen..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Data Preprocessing\n# Convert raw count data to log scale for variance stabili..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure gene names are in uppercase\nadata.var_names = ada..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Select specific GO terms related to endometrial processes\nendometrial_go_term..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming adata is already defined and prepared in the co..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Subset adata to only i..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_22.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure data in adata.X is of floating data type\nadata.X = adata.X.astype(flo..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Perform Diffusion Pseudotime (DPT) analysis\n# Extract subset data for Smooth..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Focus analysis on Ciliated epithelial cells\nciliated_cells = adata[adata.obs[..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Load and process Ciliated epithelial cells\nciliated_cells = adata[adata.obs['..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure you have a neighbors graph calculated for clustering\nsc.pp.neighbors(..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset data for unciliated epithelia\nunciliated_cells = adata[adata.obs['cel..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Performing marker gene analysis for cluster annotation\nsc.tl.rank_genes_group..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Ensure prior computation..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_16.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nfrom scvi.model import SCVI\n\n# Setting up the SCVI model\nscvi_model = SCVI(adata)\n\n# Train the SCVI..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform quality control\nsc.pp.filter_cells(adata, min_genes=200)\nsc.pp.filte..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Use the latest version of scvi-tools which may have the fix for ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\n\n# Assume adata is defined beforehand, example:\n# ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assume adata is defined beforehand and subsets for stromal fibroblasts\nstrom..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data for unciliated epithelial cells\nunciliated_adata = adata[adata.ob..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming adata contains the data only for stromal fibroblasts\nda..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assuming adata is defined beforehand\nstromal_adata = adata[adata.obs['cell_ty..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_10.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset the dataset to focus on stromal fibroblasts and unciliated epithelial ..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scvi\nimport anndata as ad\n\n# Load your AnnData object here; this would be your full pipeline..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset the dataset to focus on endothelial cells\nendothelial_data = adata[ada..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Already subsetted endothelial data\n\n# Prepare data by fin..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset the dataset to focus on unciliated epithelial cells and macrophages.\ns..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Use Macrophages and Unciliated epithelial cells from the previous selection ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Subset the dataset to focus on macrophages\nmacrophage_data = adata[adata.obs..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Load the 'macrophage_hvg' AnnData object before using it\n..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_21.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter the AnnData object for unciliated epithelial cells\nepithelial_cells = ..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Check if the data has been filtered correctly to ensure there are features f..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 1: Identify unciliated epithelial cells and preprocess\nunciliated_cells ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Ensure compatibility\nscvi.settings.reset_logging_handler()\n\n# St..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Identifying unciliated epithelial cells\nunciliated_cells = adata[adata.obs['c..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure compatibility\nsc.settings.verbosity = 3\n\n# Dimensionality reduction us..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming unciliated_cells is already defined and processed\n\n# Compute neighb..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming unciliated_cells is already defined and processed\n\n# Ensure the 'da..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_20.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Assuming data is preprocessed and stored in adata and scvi tooli..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure data is of floating type\nadata.X = adata.X.astype(float)\n\n# Perform P..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Ensure the correct installation of scvi-tools and its dependenci..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\n# Load necessary libraries\nimport scanpy as sc\n\n# Define gene sets (example lists)\nmetabolic_genes ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "# Differential Gene Expression Analysis\nimport scanpy as sc\n\n# Filter for smooth muscle cells and ma..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Log-normalize the data\nadata_raw = adata.copy()\nsc.pp.log1p(adata)\n\n# Filter ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Assuming `adata` is defined in the previous context\n# Filter for..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming `adata_smooth_macrophages` is previously defined\n# Setu..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_13.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Filter the data to focus on unciliated epithelial cells\nunciliated_cells = adata[adata.obs['cell_..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Check that scvi is compatible with your torch..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure your adata object is of a floating type\nadata.X = adata.X.astype('flo..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Differential gene expression analysis\nsc.tl.rank_genes_gr..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Normalize the data for better comparison of gene expression\nsc.pp.normalize_t..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import pandas as pd\nfrom scipy.stats import zscore\n\n# Load the unciliated epithelial cells\ndata = ad..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Ensure 'day' is categori..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Extract top variable genes identified previously\nvariabl..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_19.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Assuming adata is alrea..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Focu..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Score metabolic pathway activity using high-variance gen..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\n# Load necessary modules\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimp..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\n# Set root cell for pseudotime analysis based on day 7 high metabolic variability\nhigh_metabolic_do..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Focus on unciliated epithelial cells\nadata_un = adata[ada..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Log-transform the data\nsc.pp.log1p(ada..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimpor..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_7.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Canonical markers for cell cycle phases\ns_genes = ['MCM5', 'PCNA', 'TYMS', 'F..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set visualization param..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Focus on stromal fibroblasts and unciliated epithelia\nadata_sub = adata[adat..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Normalize and preprocess the data to recompute neighbor graph\nsc.pp.normalize..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform UMAP on the processed data\ndata = adata\nsc.tl.umap(data)\n\n# Perform ..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Focus on hormone receptor analysis\nadata_hormone = adata[:, adata.var_names.s..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure 'day' is a categorical datatype\nadata.obs['day'] = adata.obs['day'].a..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure 'day' is a categorical datatype\nadata.obs['day'] = adata.obs['day'].as..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_12.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n\nimport scanpy as sc\nimport pandas as pd\n\n# Identify transcription factors from gene expression dat..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Step: Dimensionality Redu..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n# Perform UMAP on PCA results\nsc.pp.neighbors(stromal_adata, ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Differential expression analysis\nstromal_adata = adata[adata.obs['cell_type']..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure log transformation is applied\nsc.pp.log1p(stromal_adata)\n\n# Convert '..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Prepare the data: Subset stromal_adata based on significa..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Differentiate stromal fibroblasts per menstrual day: log transformation\nstro..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Prepare data for GSEA manually as gse..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_18.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure the data is of floating type\nadata.X = adata.X.astype('float64')\n\n# C..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure the data is floating type\nadata.X = adata.X.astype('float64')\n\n# Perf..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure the data is floating type\nadata.X = adata.X.astype('float64')\n\n# Compu..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure the data is floating type\nadata.X = adata.X.astype('float64')\n\n# Compu..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure the data is floating type\nadata.X = adata.X.astype('float64')\n\n# Perfo..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure 'day' is a categorical variable\nadata.obs['day'] = adata.obs['day'].a..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Logarithmize the data\nadata = adata.copy()\nsc.pp.log1p(ada..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Ens..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_14.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Step 1: Investigate gene expression levels of estrogen and progesterone rece..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 2: Perform a Differential Expression Analysis for receptor genes in cell..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nsc.pp.log1p(adata)\n\n# Step 2 (modified): Re-run Differential Expression Analysis..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Step 2: Perform GSEA on the ranked receptor gene lists\nr..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' already contains the necessary data\n# Precompute neighbors\n..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 1: Differential Expression Analysis of Receptor Genes\nestrogen_receptor_..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import ttest_ind\n\n# Loa..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Define function for correlation analys..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_17.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data to focus on macrophages\nmacrophage_data = adata[adata.obs['cell_t..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data to focus on macrophages\nmacrophage_data = adata[adata.obs['cell_t..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Conduct trajectory analysis by first constructing a neigh..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data to focus on macrophages\nmacrophage_data = adata[adata.obs['cell_t..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\n# Import required libraries\nimport scanpy as sc\nimport scvi\nimport anndata\n\n# Assuming macrophage_d..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\n# Import required libraries\nimport scanpy as sc\nimport scvi\nimport anndata\n\n# Assuming 'adata' is d..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "# Import required libraries\nimport scanpy as sc\nimport numpy as np\nimport seaborn as sns\nimport matp..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "# Import required libraries\nimport scanpy as sc\nfrom scipy.stats import spearmanr\nimport pandas as p..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_2.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform differential expression analysis\nsc.tl.rank_genes_groups(adata, grou..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\n# Step 1: Normalize and logarithmize the data\nimport scanpy as sc\n\n# Normalize and logarithmize dat..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform differential expression analysis\nsc.tl.rank_genes_groups(adata, group..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure 'day' column is categorical\nadata.obs['day'] = ad..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Perform pseudotime analysis for macrophages\n# Ensure 'day' is set as a categ..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure 'day' is categorical\nadata.obs['day'] = adata.obs['day'].astype('cate..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Set 'day' as a categorical variable\nadata.obs['day'] = a..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Extract smooth muscle cells\nsmooth_muscle_cells = adata[adata.obs['cell_type..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_1.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Step 1: Data Normalization and Preprocessing\nimport scanpy as sc\n\n# Assuming adata is preloaded\n#..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\n\n# Step 2: Quality Control and Filtering\nsc.pp.calculate_qc_..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import numpy as np\nimport scanpy as sc\n\n# Step 2: Dimensionality Reduction\n# Perform PCA\ndata_pca = ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Differential Expression Analysis\nsc.tl.rank_genes_groups(adata, groupby='cell..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 2: Dimensionality Reduction\n# Perform Diffusion Maps\ndata_dm = sc.tl.dif..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Compute PCA\nsc.tl.pca(adata)\n\n# Compute neighbors using PCA results\nsc.pp.ne..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nimport anndata as ad\n\n# Assume 'adata' is an AnnData object that is already loaded\n# Se..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Define cell cycle genes\ns_genes = ['MCM5', 'PCNA', 'TYMS', 'FEN1', 'MCM2', '..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_11.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# UMAP Visualization for unciliated epithelial..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Clustering with Leiden algorithm\nsc.tl.leiden(adata_epithelial, resolution=1...."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Differential expression analysis between clusters\nsc.tl.rank_genes_groups(ada..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom scvi.model import SCVI\n\n# Logarithmize data\nadata_epith..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform PCA on unciliated epithelial cell data\nadata_epithelial = adata[adata..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Subset the analysis to unciliated epithelial cells\nadata_epithelial_velocity..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Assuming 'adata_epithelia..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Predefined metabolic gene sets\nmetabolic_gen..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_6.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scvi\nfrom anndata import AnnData\n\n# Ensure adata is defined before using it\n# Initialize and..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure adata.X is of float type\nadata.X = adata.X.astype(float)\n\n# Filter fo..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import matplotlib.pyplot as plt\n\n# Ensure smooth muscle cells have PCA computed\neigenvalues = smooth..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter for Macrophages\nmacrophage_cells = adata[adata.obs['cell_type'] == 'Ma..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Differential expression analysis on macrophage clusters\nsc.tl.rank_genes_gro..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Log transform the data\nsc.pp.log1p(macrophage_cells)\n\n# Differential expressi..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import hypergeom\n\ndef go_enrichment(genes,..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\ndef specific_go_enrichment(adata, cell_type, threshold_log..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_4.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nsc.tl.score_genes_cell_cycle(adata, s_genes=['MCM5', 'PCNA', 'TYMS', 'FEN1', 'M..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Scores for gene sets related to stress, immune regulation..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Convert 'day' column to categorical and ensure it's string-like\nadata.obs['d..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Log-transform the data\nsc.pp.log1p(adata)\n\n# Select cells of interest\nadata_..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset for endothelial cells\nadata_endothelia = adata[adata.obs['cell_type']..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset for endothelial cells\nadata_endothelia = adata[adata.obs['cell_type']..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Differential gene expression analysis within endothelial cells\nadata_endothe..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Run diffusion pseudotime\nsc.tl.diffmap(adata_endothelia)  # Ensure that Diff..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_critique_20250807_122802/outputs/test_no_critique_20250807_122821/test_no_critique_analysis_24.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\nsc.pp.highly_variable_genes(adata, flavor='cell_ranger', n_top_genes=2000)\nadat..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform PCA using HVGs\ndata_stromal = adata[adata.obs['cell_type'] == 'Strom..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform UMAP for better visualization of stromal fibroblasts\nsc.pp.neighbors..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Perform pseudotime analysis using Diffusion Pseudotime (DPT)\nsc.tl.dpt(data_..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset for unciliated epithelial cells and perform PCA\nadata_ue = adata[adata..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Convert 'day' column to categorical\nadata.obs['day'] = a..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import numpy as np\nimport scanpy as sc\n\n# Correct the raw data by logarithmizing\nadata_ue = adata[ad..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "import pandas as pd\nimport scanpy as sc\nfrom scipy.stats import fisher_exact\n\n# Assuming transcripti..."
            }
          ]
        }
      ],
      "errors": []
    },
    "no_vlm_20250807": {
      "test_name": "no_vlm_20250807",
      "total_code_cells_attempted": 523,
      "total_failures": 411,
      "final_successful_cells": 115,
      "final_failed_cells": 110,
      "failure_rate": 0.7858508604206501,
      "final_success_rate": 0.5111111111111111,
      "failed_fix_attempts_per_step": {
        "endo_ablation_080725/test_results_no_vlm_20250807_122806/logs/test_no_vlm_log_20250807_122829.log": {
          "1": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 0,
            "8": 3
          },
          "2": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "3": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 1,
            "5": 3,
            "6": 1,
            "7": 3,
            "8": 3
          },
          "4": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 0,
            "8": 0
          },
          "5": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 2,
            "6": 0,
            "7": 0,
            "8": 3
          },
          "6": {
            "1": 0,
            "2": 1,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "7": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 0,
            "8": 0
          },
          "8": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "9": {
            "1": 0,
            "2": 3,
            "3": 3,
            "4": 0,
            "5": 2,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "10": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 1,
            "7": 3,
            "8": 3
          },
          "11": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "12": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "13": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 1,
            "5": 2,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "14": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "15": {
            "1": 0,
            "2": 0,
            "3": 2,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 3
          },
          "16": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 1,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "17": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 1,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 3
          },
          "18": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "19": {
            "1": 0,
            "2": 3,
            "3": 3,
            "4": 1,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "20": {
            "1": 3,
            "2": 3,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "21": {
            "1": 2,
            "2": 3,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "22": {
            "1": 0,
            "2": 3,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "23": {
            "1": 3,
            "2": 2,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 0,
            "8": 3
          },
          "24": {
            "1": 1,
            "2": 1,
            "3": 0,
            "4": 2,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "25": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 0,
            "8": 0
          }
        }
      },
      "analyses": [
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_15.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "smooth_muscle_cells = adata[adata.obs['cell_type'] == 'Smooth muscle cells', :]"
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nCELL_TYPE = 'Smooth muscle cells'\ncell_type_exists = CELL_TYPE in adata.obs['cell_type'].unique()\ni..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\n# Quality Control Step\n# Enhanced filtering with emphasis on data cleanliness\nimport scanpy as sc\n\n..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\n# Corrected Quality Control\nimport scanpy as sc\n\n# Focus on Smooth Muscle Cells for targeted analys..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "# Quality Control with EDA-based Thresholds\n\nimport scanpy as sc\n\n# Define cell type for analysis\nad..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "# Reevaluate Quality Control with Detailed Rationale\n\nimport scanpy as sc\n\n# Focus on smooth muscle ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\n# Implementing the SCVI Model for Latent Space Analysis\n\nimport scvi\nimport anndata\n\n# Ensure 'adat..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Ensure scvi version compatibility\nscvi.settings.verbosity = 3  #..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_10.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure quality control by filtering cells with low counts..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scvi\nfrom scipy import stats\n\n# Ensure the correct version of scvi-tools and other dependenc..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Ensure quality control by filtering cells with low counts ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scipy import stats\n\n# Ensure you have loaded 'adata' before th..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Filter for 'Ciliated' epithelial cells\nadata_ciliated = ad..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport numpy as np\nfrom scipy import stats\n\n# Assume 'adata' is pre-defined as AnnData object\n# Fil..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scipy import stats\n\n# Filter for Ciliated epithelial cells\nada..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\nimport scvi\n\n# Assuming 'adata' is defined somewhere in..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_17.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "# Examine distribution of cell types across datasets\nassert 'cell_type' in adata.obs.columns and 'da..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "# Subset the data to focus on unciliated epithelial cells and stromal fibroblasts within the 10x dat..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Ensure 'day' metadata is correctly for..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n# Subset to foc..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\nimport logging\n\n# Refine gene selec..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport logging\n\n# Assumption: 'adata' anndata object is alre..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport logging\n\n# Assume 'adata' is previously defined, for ..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport logging\n\n# Assume 'adata' is previously defined.\n\n# Prepare ..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_13.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "smooth_muscle_cells = adata[adata.obs['cell_type'].str.strip().str.lower() == 'smooth muscle cells']..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "sc.pp.normalize_total(smooth_muscle_cells, target_sum=1e4)\nsc.pp.log1p(smooth_muscle_cells)\n# Check ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Running PCA for initial dimensionality reduction\nsc.tl.pca(smooth_muscle_cell..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure adata has a numeric data type\nadata.X = adata.X.astype(float)\n\n# Subs..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure adata has a numeric data type if not already set\nif adata.X.dtype != ..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Subset smooth muscle cells\nsmooth_muscle_cells = adata[adata.obs['cell_type'..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Subset endothelial cells\nendo_cells = adata[adata.obs['cell_type'] == 'Endot..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset endothelial cells\nendo_cells = adata[adata.obs['cell_type..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_24.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Compute basic descriptive statistics for 10x and C1 datasets per cell type\nimport pandas as pd\n\n#..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\n# Differential expression analysis for FAM87B in stromal fibroblasts\nimport scanpy as sc\nimport pan..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Normalize and log-transform the dataset\nsc.pp.normalize_t..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming adata is defined and loaded somewhere earlier i..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scvi\nimport numpy as np\n\n# Note: Assumes 'adata' is defined in the context\n# Train SCVI mode..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\nimport anndata\n\n# Ensure adata is defined and co..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset data for unciliated epithelial cells\nadata_ue = adata[ada..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Ensure adata is defined before proceeding\n# Your code should def..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_11.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Subset to only lymphocytes to investigate immune influences in endometrial ph..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Subset to macrophages to explore immune influences in endometrial physiology\n..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport anndata as ad\nimport numpy as np\n\n# Perform quality control to validate m..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter macrophage data to include only high-quality cells\nmacrophage_data = a..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Perform Differential Gene Expression Analysis\n# Focus on macrophages and men..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport anndata\n\n# Load lymphocyte data\n# Assuming adata is already ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assumed adata is already filtered and preprocessed for quality.\n# Subset lym..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Load and filter lymphocyte data from adata object\nlymphocyte_dat..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_1.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Quality check and basic statistics of immune cells\nimmune..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Correcting lymphocyte identification\nadata.obs['correct_c..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\ndef check_marker_genes(adata, inde..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Filtering out cells with high mitochondrial content and l..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Check if 'adata' is initialized\nassert 'adata' in locals(), \"'adata' not ini..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure adata is defined and contains the required data\nt..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\nimport numpy as np\n\n# Ensure adata ..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport logging\n\n# Ensure lymphocytes are isolated\nimmersed_cells = ..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_25.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nunciliated_cells = adata[adata.obs['cell_type'].isin(['Uncil..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import numpy as np\n\n# Extract unciliated epithelial cells for analysis\nunciliated_cells = adata[adat..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\n# Verify and map 'gene_biotype' information using an example gene annotation dataset\nimport scanpy ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "# Step 1: Identify diverse non-coding RNA regulatory elements\nimport scanpy as sc\nimport numpy as np..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Extract unciliated epithelial cells f..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Extract unciliated epithelial cells f..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Extract unciliated epithelial cells for analysis\nuncilia..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Normalize and logarithmize the data\nadata_raw = adata.copy()\nsc.pp.normalize_..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_18.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport pandas as pd\n\necm_genes = ['COL1A1', 'COL3A1', 'LAMA4', 'FBN1', 'FN1', 'MMP2', 'MMP9']\nadata..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Define ECM genes and filter data by unciliated epithelial..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Conduct pathway enrichment analysis with Scanpy's gene set scoring\nprint('Per..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Perform differential expression analysis of ECM scores across cell types and..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Filter data for stromal fibroblasts and macrophages for l..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Log-transform the raw count data for stromal fibroblasts and unciliated epith..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Select only stromal fibroblasts and unciliated epithelia..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Filter data for unciliated epithelial subtypes 'Unciliate..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_16.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "# Calculate average expression of hormone-responsive genes in ciliated epithelial cells per day of t..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import pandas as pd\nimport scanpy as sc\n\n# Include error handling and library import for robust code..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure preprocessing by inspecting initial data summary\ninitial_summary = ada..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nfrom celltypist import models, annotate\nimport pandas as pd\n\n# Ensure that adat..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport anndata as ad\n\n# Ensure that 'adata' is init..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport pandas as pd\nimport anndata\n\n# Assuming 'ada..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport scvi\nfrom anndata import AnnData\n\n# Assuming 'adata' ..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom anndata import AnnData\n\n# Assuming 'adata' is already initiali..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_5.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "if 'Endothelia' in adata.obs['cell_type'].unique():\n    endothelial_cells = adata[adata.obs['cell_ty..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "if 'Smooth muscle cells' in adata.obs['cell_type'].unique():\n    smooth_muscle_cells = adata[adata.o..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\n# Quality control for smooth muscle cells\ntry:\n    if 'Smooth muscle cells' in adata.obs['cell_type..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\n# Recalculate total counts and perform quality control on smooth muscle cells\nimport numpy as np\n\na..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure qc_filtered_smooth_muscle contains float32 data\nqc..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Ensure proper pre-filtering and quality of qc_filtered_smo..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Isolate stromal fibroblast cells\nstrom..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import spearmanr\n\n# Iso..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_2.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure AnnData object is available in memory\ngene_lists = {'TGF_beta': ['TGF..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Load data, focusing on unciliated epithelial cells\nuncilia..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Focus on stromal fibroblasts\nstromal_adata = adata[adata.obs['cell_type'] == ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Extract stromal fibroblasts\nstrom..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Filter and focus on smooth muscle..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Load smooth muscle cell data\nsmooth_muscle_adata = adata[adata.o..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import scanpy as sc\nimport scvi\n\n# Initialize SCVI model\nfrom scvi.model import SCVI\n\n# Subset the d..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "import pandas as pd\nimport scvi\nfrom scvi.model import SCVI\n\n# Extract smooth muscle cells\ndata_subs..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_4.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n\n# Subset the AnnData object for one of the cell types, e.g., stromal fibroblasts.\nadata_stromal = ..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\n# Filter AnnData object for cells with subs..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset the AnnData object for unciliated epithelial cells\n..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scvi\nfrom scvi.model import SCVI\nimport pandas as pd\nimport anndata\n\n# Assuming 'adata' is a..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport anndata\n\n# Generate a sample AnnData object if adata ..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport anndata\n\n# Assuming 'adata' is already in th..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import chi2_contingency\n\n# Assume adata is predefined and load..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assume adata_unknown is preprocessed; create SCVI latent space if needed\n# S..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_12.ipynb",
          "total_code_cells": 9,
          "successful_cells": 1,
          "failed_cells": 8,
          "success_rate": 0.1111111111111111,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assuming the dataset is already loaded and available as '..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "from scvi.model import SCVI\n\n# Filter data for relevant cell types\nimmune_and_stromal = adata[adata...."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Focused extraction of macrophage subtypes and stromal fibr..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset to focus on macrophage subtypes and stromal fibrobl..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Filter to focus on macrophage subtypes and stromal fibrobl..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Construct k-nearest neighbor graph using SCVI latent representation\ntry:\n    ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import scanpy as sc\nfrom scvi.model import SCVI\n\n# Filter based on specified criteria\ntry:\n    macro..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nfrom scipy.stats import ttest_ind\n\n# Filter macroph..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_23.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom statsmodels.stats.multitest import multipletests\n\n# Ass..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Applying diffusion-based pseudotime analysis\nsmooth_muscl..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Assuming adata is already loaded and availabl..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Assuming adata is already loaded\nsmooth_muscl..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Assuming adata is already loaded\nsmooth_muscl..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\nimport anndata\n\n# Assuming 'adata' is already de..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Assuming 'adata' is already defined and contains the neces..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Assuming 'adata' is already defined and conta..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_6.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset to endothelial cells only\nendothelial_cells = adata[adata.obs['cell_ty..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport pandas as pd\nfrom scipy.stats import pearsonr, zscore\nfrom scipy import stats\nimport numpy a..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is already defined and is an AnnData object with 'day' colu..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport celltypist\nimport scanpy as sc\n\n# Assuming 'endothelial_cells' is already defined and filter..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Assuming 'adata' is already defined in the context. Make sure it..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assume the input data `adata` is already loaded\n\n# Subset to end..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport anndata as ad\n\nadata = ...  # ensure adata is properly defin..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import pearsonr\nimport scvi\n\n# Assuming 'a..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_3.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Filter the dataset to focus on unciliated epithelial cells\nunciliated_epithel..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Filter the dataset to focus on the specific unciliated epithelial cell subty..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Filter the dataset to focus on the specific unciliated epithelial cell subtyp..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\n# Calculate mitochondrial gene metrics\nmt_gene_mask = unciliated_epithelial_cells.var_names.str.sta..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport anndata as ad\n\n# Assuming 'adata' is defined somewhere earli..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Filter the dataset to focus on unciliated epithelial cells\ncell_filter = ['U..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\nimport anndata as ad\nfrom scvi.model import SCVI\n\n..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scvi\n\n# Assuming 'unciliated_epithelial_cells' is already set up and normalized\n\n# Check ava..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_20.ipynb",
          "total_code_cells": 9,
          "successful_cells": 1,
          "failed_cells": 8,
          "success_rate": 0.1111111111111111,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Assuming 'adata' is defined and available in the current workspa..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is defined previously and contains the data.\n\n#..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is defined and contains the data\n\n# Filter and ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is already defined and contains the data\n\n# Fil..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Filter for specific unciliated epithelial cell subtypes across a..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Ensure anndata is loaded\nadata = sc.datasets.pbmc3k()  # Example..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Ensure SCVI latent representation is calculated\n..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is defined and contains the data\n\n# Filter and ..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_22.ipynb",
          "total_code_cells": 9,
          "successful_cells": 2,
          "failed_cells": 7,
          "success_rate": 0.2222222222222222,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Print the first few rows of the metadata to inspect its structure\nprint(adata.obs.head())\n\n# Prin..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scvi\nfrom scvi.data import setup_anndata\nimport scanpy as sc\n\n# Filter data for stromal fibr..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scvi\nfrom scvi.data import setup_anndata\nimport scanpy as sc\nimport anndata\n\n# Initialize ad..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport anndata\nimport warnings\nimport numpy as np\n\n# Assume 'adata' is already ..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scvi\nfrom scvi.data import setup_anndata\nimport anndata\nimport pandas as pd\nfrom statsmodels..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scvi\nfrom scvi.data import setup_anndata\nimport anndata\n\n# Filter data for endothelial cells..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nfrom scvi.data import setup_anndata\nimport anndata\nimport warnings\nimport torch\n\n# Ensu..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport anndata as ad\nfrom scipy.stats import chi2_contingency\n\n# Load your spec..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_21.ipynb",
          "total_code_cells": 9,
          "successful_cells": 2,
          "failed_cells": 7,
          "success_rate": 0.2222222222222222,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport numpy as np\nfrom scipy.stats import ranksums\nfrom statsmodels.stats.multitest import fdrcorr..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport anndata\nimport scvi\nimport scvi.data\nimport scanpy as sc\n\n# Filter data for unciliated epith..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport anndata\nimport scvi\nimport scanpy as sc\n\n# Assume 'adata' is pre-loaded or defined earlier i..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport anndata\nimport scanpy as sc\nimport scvi\n\n# Filter for endothelial and macrophage cells exclu..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport anndata\nimport scanpy as sc\n\n# Verify that relevant columns exist\nrequired_columns = ['cell_..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport anndata\nimport scanpy as sc\nimport scvi\n\n# Load and filter previously stored data for endoth..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport anndata\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Assume 'adata' is pre-loaded or d..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport pandas as pd\n\n# Perform differential expression analysis foc..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_9.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\ncell_type_filter = 'Smooth muscle cells'\nfiltered_smooth_muscle_cells = adata[adata.obs['cell_type'..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure filtered smooth muscle cells before differential ..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure 'adata' is defined and is a valid AnnData object\n..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure the AnnData object is defined in memory and has be..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is defined and loaded correctly before this line\n# Check if..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming 'adata' is the AnnData object you're working wi..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport anndata\n\n# Initialize or load your AnnData object here\nadata = anndata.r..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Replace with actual data path\nadata = sc.read_h5ad(\"path..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_7.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import pandas as pd\n\n# Check if the 'day' column exists\nif 'day' in adata.obs.columns:\n    # Subset ..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\n\n# Assuming 'adata' is defined in the current context\n#..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assuming 'adata' is defined in the current context and already in memory\n\n# F..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "# Step 1: Prepare Data and Fix Data Mismatches\nimport scanpy as sc\n\n# Ensure 'adata' is defined and ..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assume 'adata' is predefined elsewhere\n# Filtering macrophages and processin..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport anndata as ad\n\n# Assuming `adata` is already..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is defined in the current context and already in memory\n\n# ..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assuming 'adata' is defined in the current context and already in memory\n\n# F..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_19.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "cell_counts = adata.obs.groupby(['dataset', 'cell_type']).size().reset_index(name='cell_count')\nprin..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\n\n# Assume 'adata' is already loaded\n# Using Harmony for..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assume 'adata' is already loaded and integrated data is s..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assuming 'adata' is pre-loaded\n# Filter endothelial cells..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport scvi\nfrom scvi.data import setup_anndata\n\n# ..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scvi.data import setup_anndata\nfrom sklearn.metrics import sil..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Filter unciliated epithelial cells\nadata_ue = adata[adata.obs['c..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport pandas as pd\nimport numpy as np\n\n# Ensure the data focuses o..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_14.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset to stromal fibroblasts within adata\nstromal_cells = adata[adata.obs['..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Subset to stromal fibroblasts within ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Load and preprocess the data\nprint(\"Pr..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\n\n# Dummy lists o..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Documenting purpose of libraries\n# scanpy is used for sing..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset to stromal fibroblasts\nstromal_cells = adata[adata.obs['cell_type'] ==..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport pandas as pd\nimport anndata as ad\n\n# Subset to stromal fibro..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\n\n# Subset to stro..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_20250807_122806/outputs/test_no_vlm_20250807_122829/test_no_vlm_analysis_8.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Define canonical cell-cycle genes for..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Focus analysis on stromal fibroblasts\n..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Define 'adata' before using it\n# Assuming 'adata' is alre..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure 'adata' is normalized or contains floating point data\nadata.X = adata..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data to include only endothelial and stromal fibroblast cells.\nadata_e..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Make a copy to preserve raw counts\nadata_copy = adata_endothelial_stromal.cop..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure 'leiden' is a viable group-by variable\nif 'leiden' in adata.obs:\n    #..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data to obtain endothelial cells filtered on pseudotime\nadata_filtered..."
            }
          ]
        }
      ],
      "errors": []
    },
    "no_vlm_no_critique_20250807": {
      "test_name": "no_vlm_no_critique_20250807",
      "total_code_cells_attempted": 157,
      "total_failures": 106,
      "final_successful_cells": 46,
      "final_failed_cells": 26,
      "failure_rate": 0.6751592356687898,
      "final_success_rate": 0.6388888888888888,
      "failed_fix_attempts_per_step": {
        "endo_ablation_080725/test_results_no_vlm_no_critique_20250807_122802/logs/test_no_vlm_no_critique_log_20250807_122821.log": {
          "1": {
            "1": 0,
            "2": 1,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "2": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "3": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "4": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "5": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 1,
            "6": 1,
            "7": 0,
            "8": 0
          },
          "6": {
            "1": 3,
            "2": 0,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "7": {
            "1": 1,
            "2": 3,
            "3": 3,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "8": {
            "1": 1,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 0,
            "8": 0
          },
          "9": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 2
          }
        }
      },
      "analyses": [
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_no_critique_20250807_122802/outputs/test_no_vlm_no_critique_20250807_122821/test_no_vlm_no_critique_analysis_2.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Filter the dataset to focus on immune-related cell types\nimmune_cells = adata[adata.obs['cell_typ..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "# Subset to isolate specific immune cell subtypes\nimmune_subtypes = immune_cells[immune_cells.obs['c..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\n# Subset to focus on epithelial and endothelial cell types\nepi_endo_cells = adata[adata.obs['cell_t..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure the correct data type for the distance matrix\nepi_endo_cells.X = epi_..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "# Validate the clusters by checking expression of known markers\nmarker_genes = ['EPCAM', 'PECAM1', '..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "# Normalize and log-transform data for accurate differential expression analysis\nsc.pp.normalize_tot..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nfrom scipy.stats import fisher_exact\n\n# Load highly variable genes\nhvg_list = ep..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Perform pathway enrichment analysis\nimmune_pathways_sets ..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_no_critique_20250807_122802/outputs/test_no_vlm_no_critique_20250807_122821/test_no_vlm_no_critique_analysis_4.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import pandas as pd\nfrom scipy.stats import f_oneway\n\n# Filter out for stromal fibroblasts for explo..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import variation\n\n# Assuming `adata` is an ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport pandas as pd\nfrom scipy.stats import norm\nimport anndata\n\n# Filter out macrophages\nmacrophag..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Extract resolved genes of interest, e.g., 'FAM138A', 'OR4..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy.stats import f_oneway\n\n# Subset data for days of ..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Subset data for relevant cell types\ncell_types_of_intere..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nfrom scvi.data import setup_anndata\nimport torch\n\n#..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Focus on specific days\nkey_days = [7,..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_no_critique_20250807_122802/outputs/test_no_vlm_no_critique_20250807_122821/test_no_vlm_no_critique_analysis_3.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\n\n# Define a list of genes for cellular stress, mor..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scipy.stats as stats\nimport pandas as pd\n\n# Define phases of menstrual cycle as proxy for 'da..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Score the gene signatures related to specific processes ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Integrate scVI for more robust clustering\nscvi.data.setup_anndat..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Score the gene signatures related to specific processes for each cell type\nc..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Define subtypes for unciliated epithelia\nsubtypes = ['Unciliated epithelia 1'..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Assuming 'adata' is already defined and imported properly\n# Setu..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Define gene sets involved in the window of implantation and implantation read..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_no_critique_20250807_122802/outputs/test_no_vlm_no_critique_20250807_122821/test_no_vlm_no_critique_analysis_1.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nprint(f\"Summary of Stromal Fibroblasts: {adata.obs[adata.obs['cell_type'] == 'Stromal fibroblasts']..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport numpy as np\n\nadata.X = adata.X.astype(np.float32)\nsc.tl.pca(adata)\nsc.pp.neighbors(adata, n_..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "sc.tl.rank_genes_groups(adata, 'leiden', method='wilcoxon', key_added='rank_genes')\nprint(adata.uns[..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "import numpy as np\nsc.pp.log1p(adata)\nadata.X = adata.X.astype(np.float32)"
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import numpy as np\nimport scanpy as sc\n\nsc.pp.normalize_total(adata, target_sum=1e4)\nsc.pp.log1p(ada..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\n\n# Verify if the dataset is already log-transformed by check..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\nfrom collections import defaultdict\n\n# Ensure raw data is av..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\n\n# Re-initialize raw data if not present\nif not hasattr(adat..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_no_critique_20250807_122802/outputs/test_no_vlm_no_critique_20250807_122821/test_no_vlm_no_critique_analysis_7.ipynb",
          "total_code_cells": 9,
          "successful_cells": 2,
          "failed_cells": 7,
          "success_rate": 0.2222222222222222,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\ngene_variances_10x = np.var(adata[adata.obs['dataset'] == '..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport scvi\n\n# Set up the AnnData object for scvi-tools\nscvi..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scanpy.external as sce\n\n# Make sure adata is loaded and 'batch' column e..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scanpy.external as sce\n\n# Filter to focus on unciliated epithelial cells..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Conduct pseudotime analysis\n# Compute diffusion map\nsc.tl.diffmap(adata_epith..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Enrichment analysis on endothelial cells\nadata_endothelial = adata[adata.obs[..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Focus on lymphocytes\nadata_lymphocytes = adata[adata.obs['cell_type'] == 'Lym..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "import numpy as np\nfrom scipy.stats import levene\n\n# Filter to focus on unciliated epithelial cells\n..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_no_critique_20250807_122802/outputs/test_no_vlm_no_critique_20250807_122821/test_no_vlm_no_critique_analysis_8.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\nadata = adata  # Assuming adata is preloaded in memory\n\n# Ensure the data is o..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming adata is already loaded in memory\n\n# Run PCA to compute the number ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assuming adata is already loaded in memory\n\n# Filter for macrophages\nadata_ma..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming adata is already loaded in memory\n\n# Identify marker genes for each..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming adata is already loaded in memory\n\n# Logarithmize raw count data\nsc..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming adata is already loaded in memory\n\n# Check that 'leiden' is in adat..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assuming adata is already loaded in memory\n\n# Restrict to major cell types in..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy.stats import hypergeom\n\n# Assumed that 'connectiv..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_no_critique_20250807_122802/outputs/test_no_vlm_no_critique_20250807_122821/test_no_vlm_no_critique_analysis_5.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import numpy as np\nimport pandas as pd\n\n# Calculate the number of cells per cell type across differe..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport pandas as pd\nimport scanpy as sc\nimport anndata as ad\n\n# Assuming adata is defined elsewhere..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming adata is defined and contains the preprocessed ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Check for correct annotation of 'cell_type'\nif 'cell_type..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming adata is defined and contains the preprocessed ..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Step 1: Optimize clustering to re-evaluate cell types\nda..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Step 1: Enhanced marker refinement for macrophages and fi..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assuming adata_refined is the refined dataset obtained from step 1\n# Step: Di..."
            }
          ]
        },
        {
          "notebook_path": "endo_ablation_080725/test_results_no_vlm_no_critique_20250807_122802/outputs/test_no_vlm_no_critique_20250807_122821/test_no_vlm_no_critique_analysis_6.ipynb",
          "total_code_cells": 9,
          "successful_cells": 2,
          "failed_cells": 7,
          "success_rate": 0.2222222222222222,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport pandas as pd\nimport scanpy as sc\n\n# Assuming adata is defined and properly initialized somew..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport scanpy as sc\n\n# Isolate non-endothelial cells\nadata = adata.copy()  # En..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport anndata\nimport scanpy as sc\n\n# Ensure endothelial cell data is correctly typed\nendothelial_c..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Ensure endothelial cell data is correctly typed\nendothelial_cell..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport pandas as pd\nimport numpy as np\n\n# Ensure endothelial cell d..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Focus on previously identified clusters of endothelial ce..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\nimport numpy as np\nimport torch\n\n# Ensure endothelial cell data is ..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport scvi\n\n# Initialize the scvi model on the input data a..."
            }
          ]
        }
      ],
      "errors": []
    }
  }
}