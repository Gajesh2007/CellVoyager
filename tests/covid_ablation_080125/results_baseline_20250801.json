{
  "test_name": "baseline_20250801",
  "total_code_cells_attempted": 90,
  "total_failures": 49,
  "final_successful_cells": 38,
  "final_failed_cells": 18,
  "failure_rate": 0.5444444444444444,
  "final_success_rate": 0.6785714285714286,
  "failed_fix_attempts_per_step": {
    "covid_ablation_080125/test_results_baseline_20250801_133159/logs/test_baseline_log_20250801_133215.log": {
      "1": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 2,
        "6": 0
      },
      "2": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0
      },
      "3": {
        "1": 0,
        "2": 0,
        "3": 1,
        "4": 0,
        "5": 0,
        "6": 0
      },
      "4": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 1,
        "5": 0,
        "6": 0
      },
      "5": {
        "1": 3,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 2,
        "6": 0
      },
      "6": {
        "1": 0,
        "2": 0,
        "3": 2,
        "4": 0,
        "5": 0,
        "6": 0
      },
      "7": {
        "1": 0,
        "2": 0,
        "3": 3,
        "4": 0,
        "5": 0,
        "6": 2
      },
      "8": {
        "1": 0,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 3,
        "6": 3
      }
    }
  },
  "analyses": [
    {
      "notebook_path": "covid_ablation_080125/test_results_baseline_20250801_133159/outputs/test_baseline_20250801_133215/test_baseline_analysis_7.ipynb",
      "total_code_cells": 7,
      "successful_cells": 6,
      "failed_cells": 1,
      "success_rate": 0.8571428571428571,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\n# Define gene sets of interest for signature scoring, ensuring use of comprehensive literature-deri..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Construct neighborhood graph on T cells using normalized pathway scores befor..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Assuming 'adata' is already defined in the conte..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Filter for T cells and preprocess\nadata_t = adata[adata.obs['cell_type_coarse..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "# Import required library\nimport scanpy as sc\n\n# Preprocessing and data subset\n# Start by selecting ..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Annotate clusters using known immune markers for clearer identification of p..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080125/test_results_baseline_20250801_133159/outputs/test_baseline_20250801_133215/test_baseline_analysis_6.ipynb",
      "total_code_cells": 7,
      "successful_cells": 3,
      "failed_cells": 4,
      "success_rate": 0.42857142857142855,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Define cell-cycle gene markers for S-phase and G2M-phase\ns_genes = ['MCM5', '..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Define cell-cycle gene markers for S-phase and G2M-phase\ns_genes = ['MCM5', '..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom scipy.stats import mannwhitneyu\nimport seaborn as sns\n\n..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom sc..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Isolate CD4 and CD8 T cells\nCD4_T_cells = adata[adata.ob..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Define immune checkpoint genes\nimmune_checkpoints = ['PDC..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080125/test_results_baseline_20250801_133159/outputs/test_baseline_20250801_133215/test_baseline_analysis_5.ipynb",
      "total_code_cells": 7,
      "successful_cells": 6,
      "failed_cells": 1,
      "success_rate": 0.8571428571428571,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load a comprehensive lig..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nfrom anndata import AnnData\nimport numpy as np\n..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Filter data for CD8 T cells\nadata_cd8 = adata..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Re-cluster CD8 T cells to identify subpopulat..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Subset for CD8 T cells, ensure subpopulation IDs are cle..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as stat..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080125/test_results_baseline_20250801_133159/outputs/test_baseline_20250801_133215/test_baseline_analysis_1.ipynb",
      "total_code_cells": 7,
      "successful_cells": 6,
      "failed_cells": 1,
      "success_rate": 0.8571428571428571,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Define S-phase and G2M-phase marker gene lists\ns_genes = [\n    'MCM5', 'PCNA..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Define S-phase and G2M-phase marker gene lists, excluding MALATI and GRAB\ns_g..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import Logistic..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "sc.tl.score_genes_cell_cycle(adata, s_genes=s_genes, g2m_genes=g2m_genes)"
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure data is pre-processed: filtered, normalized, and ..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import pearsonr\n\n# Prep..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080125/test_results_baseline_20250801_133159/outputs/test_baseline_20250801_133215/test_baseline_analysis_4.ipynb",
      "total_code_cells": 7,
      "successful_cells": 7,
      "failed_cells": 0,
      "success_rate": 1.0,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Compute neighborhood graph and perform UMAP e..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Check if 'cell_type_fine' column exists in the metadata\n..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset data to only include CD4 T cells\ncd4_t_subset = adata[adata.obs['cell..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Subset data to only include CD4 T cells\ncd4_t_subset = a..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom s..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n# ..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080125/test_results_baseline_20250801_133159/outputs/test_baseline_20250801_133215/test_baseline_analysis_8.ipynb",
      "total_code_cells": 7,
      "successful_cells": 2,
      "failed_cells": 5,
      "success_rate": 0.2857142857142857,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Specify cell types of interest for focused analysis\ntarget_cell_types = ['CD..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Subset data for low-dimensional analysis\nadata.var_names_make_unique()\nsc.pp..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import ttest_ind\n\n# Introduce docstring\n\"\"\"\nThis analysis step..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Preprocess the data\nadata.raw = adata.copy()\nsc.pp.filter_cells(adata, min_g..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is defined earlier and is an AnnData object\n# Filter and re..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is defined earlier and is an AnnData object\n\n# Adjust data ..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080125/test_results_baseline_20250801_133159/outputs/test_baseline_20250801_133215/test_baseline_analysis_3.ipynb",
      "total_code_cells": 7,
      "successful_cells": 5,
      "failed_cells": 2,
      "success_rate": 0.7142857142857143,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Define S and G2M phase genes\ns_genes = ['MCM..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Focus on Monocytes and CD8..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Pre-identified cytokine and interferon genes..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Subset the data for Monocytes and CD8 T cells\nmonocytes_c..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# List expanded cytokine, interferon, and STING..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset the data for Monocytes and CD8 T cells..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080125/test_results_baseline_20250801_133159/outputs/test_baseline_20250801_133215/test_baseline_analysis_2.ipynb",
      "total_code_cells": 7,
      "successful_cells": 3,
      "failed_cells": 4,
      "success_rate": 0.42857142857142855,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Replace placeholder gene lists with commonly used lists for humans\ns_genes = ..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\ntry:\n    # Check if cell cycle scores exist in adata\n    if {'S_score', 'G2M_sc..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "import scanpy as sc\nimport scvi\n\n# Prepare the data for scVI\nscvi.model.SCVI.setup_anndata(adata)\n\n#..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "import scanpy as sc\nimport scvi\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n# Pr..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "import scanpy as sc\nimport scvi\nfrom scipy import stats\n\n# Data preprocessing\nsc.pp.normalize_total(..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import scanpy as sc\nimport scvi\nfrom scipy import stats\n\n# Check preprocessing\nassert 'counts' in ad..."
        }
      ]
    }
  ],
  "errors": []
}