{
  "test_name": "baseline",
  "total_code_cells_attempted": 0,
  "total_failures": 0,
  "final_successful_cells": 99,
  "final_failed_cells": 36,
  "failure_rate": 0.0,
  "final_success_rate": 0.7333333333333333,
  "failed_fix_attempts_per_step": {},
  "analyses": [
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_14.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Ensur..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\n# Import necessary packages\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\n# Import necessary packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\n\n# ..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport scanpy as sc\n\nadata.o..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Ensure 'day' is categorical for phase..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Ensure 'day' is categorical for phase..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Ensure 'day' is categorical for phase..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_7.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset the data to focus on smooth muscle ce..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scvi\n\n# Setup anndata for SCVI\nscvi.data.setup_anndata(smooth_muscle_adata, batch_key='day')\n..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scvi\nimport torch\n\n# Configure Anndata for SCVI with reduced epochs and check GPU\nscvi.data.s..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import anndata as ad\nimport scvi\nimport torch\n\n# Subset the data to focus on smooth muscle cells\nsmo..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import anndata as ad\nimport scvi\nimport numpy as np\nfrom sklearn.model_selection import train_test_s..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nimport anndata as ad\nimport ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nimport anndata as ad\nimport ..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scvi\nimport torch\nimport scanpy as sc\n\n# Configure Anndata for SCVI with reduced epochs and ..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_6.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Violin plot for AR expression across smooth m..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\n\n# Subset s..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset smooth muscle cells\nadata_smooth_musc..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import krus..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Check for AR-related pathway genes in the dataset\nar_pathway_genes = ['GENE_..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import krus..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Assuming adata is already..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Subset to smooth muscle c..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_5.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset endothelial cells\nendothelial_cells_subset = adata[adata.obs['cell_typ..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Quality control and normalization\nsc.pp.filter_cells(endothelial_cells_subse..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scvi.model import SCVI\nimport numpy as np\n\n# Load data\nadata =..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Load data\nadata = sc.read_h5ad(\"/scratch/users/salber/end..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scvi.model import SCVI\nimport numpy as np\n\n# Declare the data ..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scvi.model import SCVI\nimport numpy as np\n\n# Endothelial cell ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nfrom scvi.model import SCVI\nimport numpy as np\n\n# Subset endothelia..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Subset endothelial cells\nendothelial_subset =..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_13.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Subset ciliated epithelial cells focusing on their unique expression profiles..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Attempt to subset ciliated epithelial cells and check data quality\nif 'Ciliat..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\n# Quality control of ciliated epithelial cells\nadata = ciliated_data.copy()\n\ndef perform_quality_co..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\n# Assume adata already has ciliated epithelial data subset\nsc.pp.filter_cells(adata, min_genes=200)..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure neighbors are computed\nif 'neighbors' ..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\nif 'Ciliated' in adata.obs['cell_type'].unique():\n    cilia..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport anndata as ad\nimport numpy as np\n\n# Assume the dataset is already loaded ..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\nif 'Ciliated' not in adata.obs['cell_type'].unique():\n    ra..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_10.ipynb",
      "total_code_cells": 9,
      "successful_cells": 9,
      "failed_cells": 0,
      "success_rate": 1.0,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Ensure 'day' is categori..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Check if differential exp..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Check the 'day' annotation\nadata.obs['day'] = adata.obs[..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure 'day' is categorical\nadata.obs['day'] = adata.obs..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scvi\nfrom scvi.model import SCVI\n\n# Subset the data to only include stromal fibroblasts\nadat..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the data for stromal fibroblasts only\nadata_stromal = ada..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\n\n# Subsample the stromal fibroblasts data by choosing 20% of the tot..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom scvi.model import SCVI\n\n# Subset stromal fibroblasts and filter for circadi..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_1.ipynb",
      "total_code_cells": 9,
      "successful_cells": 9,
      "failed_cells": 0,
      "success_rate": 1.0,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Step 1: Re-cluster lymphocyte and macrophage populations, focusing on tradit..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import mannwhitneyu\n\n# Validate identified clusters using know..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scvi\n\n# Prepare the anndata object for SCVI\nscvi.data.setup_anndata(adata, batch_key='day', l..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scvi\n\n# Re-run SCVI with refined hyperparameters for improved efficiency\nscvi.data.setup_annd..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "# Step 1: Subsampling for faster model training\nimport numpy as np\nimport scanpy as sc\n\n# Set seed f..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset data to focus on ciliated and unciliated epithelial cells\nepithelial_a..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Set seed for reproducibility\nnp.random.seed(42)\n\n# Optimiz..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Set seed for reproducibility\nnp.random.seed(42)\n\n# Select ..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_9.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Subset unciliated epithelial cells\nepith_subset = adata[adata.obs['cell_type'..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Subset unciliated epithelial cells\nepith_subset = adata[adata.obs['cell_type'..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Calculate the number of genes per cell\nepith..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Normalize the data\nsc.pp.normalize_total(epith_subset, target_sum=1e4)\nsc.pp..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport pandas as pd\nimport scanpy as sc\n\n# Convert 'day' column to category dtype if it's not alrea..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Convert 'day' column to category dtype if it's not alrea..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport pandas as pd\nimport scanpy as sc\n\n# Ensure 'day' column is categorical\nif not pd.api.types.i..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Subset unciliated epithelial cells and..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_4.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Subset the data to focus..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure adata is loaded and contains all nece..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\nimport logging\n\n# Set up a logging mechanism for..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport logging\n\n# Set up a logging mechanism for detailed error reporting\nloggin..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Initialize 'marker_expressions' column with NaNs for fibr..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Initialize 'marker_expressions' column in 'var' to track k..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Filter for stromal fibroblasts and ensure valid data\nstr..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Fi..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_8.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "smooth_muscle_cells = adata[adata.obs['cell_type'] == 'Smooth muscle cells'].copy()\nsmooth_muscle_ce..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "smooth_muscle_cells = adata[adata.obs['cell_type'] == 'Smooth muscle cells'].copy()\nsmooth_muscle_ce..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset the smooth muscle cells from the dataset\nsmooth_muscle_cells = adata[a..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset the smooth muscle cells\nsmooth_muscle_cells = adata[adata.obs['cell_ty..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Perform PCA on the smooth muscle cells\nsc.pp.pca(smooth_muscle_cells)\n\n# Use..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom sklearn.metrics import silhouette_score\n\n# Subset the s..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom sklearn.metrics import silhouette_score\n\n# Subset the smooth muscle cells\ns..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom sklearn.metrics import silhouette_score\n\n# Subset the s..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_3.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Define list of clock genes\nclock_gene_list = ['PER1', 'CL..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Log normalize the data\nsc.pp.log1p(adata)\n\n# Re-subset th..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Calculate QC metrics\nsc.pp.calculate_qc_metrics(adata, inplace=True)\n\n# Perf..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Verify log transformation using metadata\nif 'log1p' in adata.uns and adata.un..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Subset the data to specific cell types and circadian clock genes\ncell_types_o..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Ensure presence and validity of core circadian clock genes\ncore_circadian_gen..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Check if data requires log transformation\nif 'log1p' not i..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Compute a neighborhood graph of cells using PCA as the representation\nsc.pp...."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_12.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport s..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Normalize and scale the data for stro..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Nor..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Subs..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport seaborn a..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Subset to stromal fibroblasts\nstromal_..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Subset and preprocess data..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset to stromal fibroblasts\nstromal_fibroblasts = adata[..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_11.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\n# Quality control to filter cells\nimport scanpy as sc\nimport numpy as np\n\n# Filtering cells based o..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Normalize data with scran followed by log-transformation\ns..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure the correct file path is specified for the circad..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Load data\nadata = sc.read_h5ad(\"/scratch/users/salber/en..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport pandas as pd\n\n# Specify the correct file path for the..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport scanpy as sc\nimport pandas as pd\n\n# Load data\nadata = sc.read_h5ad(\"/scra..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Load data\nadata = sc.read_h5ad(\"/scratch/users/salber/endo_data.h5ad\")\n\n# Nor..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Load data\nadata = sc.read_h5ad(\"/scratch/users/salber/en..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_15.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure adata is defined before use\n# Example: adata = sc.datasets.some_datas..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Ensure the anndata object is defined and subset for smooth muscle cells\ndata_..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport numpy as np\n\n# E..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subset smooth muscle cells\nsmooth_muscle_data = adata[ada..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Subset smooth muscle cells..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset smooth muscle cells\nsmooth_muscle_data = adata[adata.obs['cell_type'] ..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Subset smooth muscle cell..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset smooth muscle cells\nsmooth_muscle_data = adata[adat..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_baseline_20250824_161417/outputs/test_baseline_20250824_161441/test_baseline_analysis_2.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assume 'adata' is already defined somewhere in the conte..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure the data is float\nadata.X = adata.X.astype(np.floa..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Assuming 'adata' is already defined\n\n#..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import pandas as pd\nfrom scipy import stats\n\n# Function for performing ANOVA and handling missing va..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import pandas as pd\nfrom scipy import stats\n\n# Check for sufficient sample size in each group using ..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import pandas as pd\nimport logging\n\n# Function to check for sufficient sample size\n\ndef check_sample..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\n# Import necessary packages\nimport scanpy as sc\nimport numpy as np\nfrom scvi.model import SCVI\nfrom..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import pandas as pd\nimport scanpy as sc\nimport numpy as np\n\n# Subsetting the adata object for stroma..."
        }
      ]
    }
  ],
  "errors": []
}