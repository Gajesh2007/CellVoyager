{
  "test_name": "baseline_20250807",
  "total_code_cells_attempted": 423,
  "total_failures": 320,
  "final_successful_cells": 117,
  "final_failed_cells": 72,
  "failure_rate": 0.7565011820330969,
  "final_success_rate": 0.6190476190476191,
  "failed_fix_attempts_per_step": {
    "covid_ablation_080725/test_results_baseline_20250807_122503/logs/test_baseline_log_20250807_122519.log": {
      "1": {
        "1": 0,
        "2": 3,
        "3": 0,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "2": {
        "1": 3,
        "2": 3,
        "3": 0,
        "4": 3,
        "5": 3,
        "6": 1,
        "7": 3,
        "8": 3
      },
      "3": {
        "1": 0,
        "2": 3,
        "3": 0,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 0
      },
      "4": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 3,
        "6": 0,
        "7": 0,
        "8": 2
      },
      "5": {
        "1": 0,
        "2": 3,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 3
      },
      "6": {
        "1": 0,
        "2": 3,
        "3": 3,
        "4": 0,
        "5": 3,
        "6": 3,
        "7": 1,
        "8": 0
      },
      "7": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 3,
        "5": 0,
        "6": 0,
        "7": 1,
        "8": 3
      },
      "8": {
        "1": 0,
        "2": 0,
        "3": 2,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "9": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 2,
        "7": 3,
        "8": 0
      },
      "10": {
        "1": 3,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 3,
        "8": 2
      },
      "11": {
        "1": 0,
        "2": 0,
        "3": 3,
        "4": 3,
        "5": 3,
        "6": 0,
        "7": 0,
        "8": 3
      },
      "12": {
        "1": 1,
        "2": 3,
        "3": 0,
        "4": 0,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "13": {
        "1": 3,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 1
      },
      "14": {
        "1": 0,
        "2": 0,
        "3": 3,
        "4": 0,
        "5": 0,
        "6": 1,
        "7": 3,
        "8": 0
      },
      "15": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 3,
        "8": 0
      },
      "16": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 1,
        "6": 3,
        "7": 0,
        "8": 3
      },
      "17": {
        "1": 0,
        "2": 0,
        "3": 3,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
      },
      "18": {
        "1": 0,
        "2": 3,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 3,
        "7": 2,
        "8": 0
      },
      "19": {
        "1": 0,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 3,
        "6": 3,
        "7": 3,
        "8": 3
      },
      "20": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 2,
        "7": 0,
        "8": 0
      },
      "21": {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
      }
    }
  },
  "analyses": [
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_14.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Use the information in the dataset to subset ..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Use previously prepared subset of \u03b3\u03b4 T cells\nsubset_gd_T_cells = adata[adata...."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Utilize subset of \u03b3\u03b4 T cells from pri..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Filter dataset to include \u03b3\u03b4 T and CD8..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Utilize subset of \u03b3\u03b4 T cells using pre-defined conditions\nsubset_gd_T_cells =..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Use pre-subsetted \u03b3\u03b4 T cells subset\nsubset_gd_T_cells = adata[adata.obs['cel..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Assuming 'adata' is already loaded in..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Subset the data to include \u03b3\u03b4 T and CD..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_7.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Subset the data for rare ..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset the data for monocytes, T cells, and d..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset the data for relevant cell types\nadata_mon_tcells =..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Assuming `adata` is an AnnData o..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset the data for innate immune cells\nadata..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Perform differential expression analysis for clusters us..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define ISG list extracte..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Subset data by admission..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_16.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nfrom anndata import AnnData\nimport scanpy as sc\n\n# Assume 'adata' is defined prior to this code sni..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import numpy as np\nimport pandas as pd\nfrom scipy.stats import zscore\nimport scanpy as sc\n\n# Assume ..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "# Step 1: Validate senescence-related gene sets and identify differently expressed genes in monocyte..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\n# Step 2: Senescence Pathway Enrichment Analysis\n\nimport scanpy as sc\nimport pandas as pd\nimport nu..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\n# Step 1: Differential Gene Expression Analysis focusing on novel inflammatory pathways\n\nimport sca..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\n# Step 1: Cell-Cell Communication Analysis\nimport scanpy as sc\nimport seaborn as sns\nimport matplot..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subset data for CD14 Monocytes\nadata_monocytes = adata[ad..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import ks_2..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_6.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Initial metadata exploration of Tregs in both COVID-19 and Healthy individual..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\n# Import the necessary library\nimport scanpy as sc\n\n# Subset data for Tregs\nadata_Treg = adata[adat..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Step: Subset data and perform clustering on Tregs\nadata_Treg = adata[adata.o..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Step 1: Subset and preprocess Treg cells with emphasis on quality control\nad..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Step 1: Subset Treg cells and preprocess\nadata_Treg = adata[adata.obs['cell_..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.data import setup_anndata\nfrom scvi.model import SCVI\n\n# Subset Treg ..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Step 1: Subset and preprocess Treg cells with a focus on metadata and qualit..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Step 1: Perform quality control on Treg cells\nadata_Treg = adata[adata.obs['c..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_5.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Ensure mitochondrial g..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport matplotlib.pyplot as plt\n\n# Ensure you are using compatible ..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport anndata\n\n# Load your ..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Identifying highly variable genes specific f..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Check for required colum..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Subset to class-switched..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport anndata\n\n# Ensure the anndata object is in place\nasse..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport a..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_13.ipynb",
      "total_code_cells": 9,
      "successful_cells": 2,
      "failed_cells": 7,
      "success_rate": 0.2222222222222222,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport matplotlib.pyplot as plt\n\n# Assume adata is already loaded\ns..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport matplotlib.pyplot as plt\n\n# Setup SCVI model focusing on lnc..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Adjusting SCVI model setup for CD4 and CD8 T cells\nadata_cd4_cd8..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Load the AnnData object 'adata_cd4_cd8' from a file\nadata_cd4_cd8 = sc.read(..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the data to include only CD4 and CD8 T cells\nadata_cd4_cd..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport scvi\n\n# Subset the data to include only CD4 and CD8 ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the data to include only CD4 and CD8 T cells\nadata_cd4_cd..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset the data to include only CD4 and CD8 T cells\nadata_cd4_cd8 = adata[ad..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_18.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset the anndata object to include only CD4 and CD8 T cells\nadata_cd4_cd8 ..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom s..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Subset the AnnData object..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset the AnnData object to include only CD4..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Perform subclustering on the most variable clusters at res..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import mannwhitneyu\n\n# Subset the anndata object for CD4/CD8 T..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset the data for CD4 and CD8 T cells\nadata_cd4_cd8 = adata[adata.obs['cel..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Prepare the data for DE analysis between ICU ..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_10.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure adequate representation of developing neutrophils\n# Assume developing..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Isolate activated granulocytes\nadata_activated_granulocytes = adata[adata.ob..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Perform Leiden clustering on activated granulocytes\nadata_activated_granulocy..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import wilcoxon\n\n# Ensure data integrity a..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import fisher_exact\n\n# ..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Activated GRANULOCYTE Subset\nadata_activated_granulocytes..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import wilcoxon\nimport pandas as pd\nimport numpy as np\n\n# ISG ..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import wilcoxon\nimport numpy as np\n\n# Subs..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_19.ipynb",
      "total_code_cells": 9,
      "successful_cells": 2,
      "failed_cells": 7,
      "success_rate": 0.2222222222222222,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "# Exploratory Analysis of Interferon-Stimulated Genes by Admission and Health Status\nimport scanpy a..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the AnnData for monocytes and T-cells using 'cell_type_co..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport torch\n\n# Subset the AnnData for CD8 T, CD4 T, and CD14 Monoc..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming adata is already defined in the context\n# Subset the An..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the AnnData for GD T cells and pDC using 'cell_type_fine'..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming `adata` is defined somewhere else in the user's code en..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the AnnData for NK cells and B cells using 'cell_type_fin..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Ensure `adata` is defined before using it.\n\n# Subset the AnnData..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_1.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Visualize UMAP embeddings colored by cell ty..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Assuming 'adata' is defined previousl..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Filter for CD14+ and CD16+ monocytes\nmonocytes = adata[adata.obs['cell_type_c..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Assuming adata is already defined els..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Use the existing monocyte filtering a..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming 'adata' is defined and populated with relevant ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport matplotlib.pyplot as plt\n\n# Fit SCVI model f..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Filter for CD14+ and CD16+ monocytes\nmonocyt..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_9.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Exploratory analysis of QC metrics\nif 'perc..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n\n# Subset cells by Adm..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotli..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n# Subset data f..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nfrom __future__ import annotations\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimpor..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport seaborn a..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport anndata as ad\n\n# Initialize and train SCVI m..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nfrom scipy import stats\nimport pandas as pd\nimport seaborn as..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_17.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\n# Import relevant libraries\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as p..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "# Subset the data to focus on specific granulocyte subtypes, with an emphasis on eosinophils\nadata_g..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Differential expression ..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scip..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Focus..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Define lists of genes contributing to the metabolic scor..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Diffe..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_4.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset to only developing neutrophil populations\nneutrophils = adata[adata.o..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Subset to only developing neutrophil populations\nneutroph..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Subset the data to include monocytes and developing neutrophils for sufficie..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "# Refine clustering and annotate subpopulations\nneutrophils_and_monocytes = adata[adata.obs['cell_ty..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Subset data by relevant cell types and ventilated status\nneutrophils_and_mon..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Subset data by relevant cell types and ventilation status..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\n# Annotate clusters based on known immune markers like CD14, CD16, and T cell markers\nimport scanpy..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\n# Subset data accurately for T cells and monocytes, checking available labels\nmonocytes_and_tcells ..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_8.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Step 1: Perform cell type-specific clustering using Leiden algorithm.\n# Note..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Perform differential expression analysis on identified T cells and Monocytes ..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimp..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom ..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.cluster.hierarchy..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Ensure the data is normal..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Setup anndata for scVI with batch correction\nscvi.data.setup_ann..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Ensure 'adata' is defined, possibly w..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_3.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom scipy.stats import mannwhitneyu\n\n# Define an interferon-related gene set fr..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Subset data to monocytes and T cells based on 'c..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subset the data to focus on monocytes and T cells\nadata_m..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport anndata\nimport numpy as np\nfrom scvi.model import SCVI\n\n# Annotate monoc..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport scvi\n\n# Subset data to monocytes and T cells based on..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Setup anndata for scVI and train the model\nscvi.model.SCVI.setup..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom scvi.model import SCVI\n\n# Subset and filter to focus on..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Load curated list of validated interferon-stimulated gene..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_12.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure 'mitochondrial' genes are identified in var before calculating metric..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\n# SCVI model training for dimensionality reduction\nimport scvi\nimport scanpy as sc\n\n# Ensure anndat..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport celltypist\nimport scanpy as sc\n# Load predictor model\nmodel = celltypist.models.download_mod..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Re-log normalize and scale the data to address warnings and prepare for anal..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Check for required metadata columns presence\nrequired_columns = ..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the data to focus on CD4 T cells and erythroblasts\ncd4_er..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Specify S and G2/M phase marker genes\ns_genes = ['MCM5', ..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Sub..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_11.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Check for the required keys before subsetting\nif 'cell_type_coarse' in adata...."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Check for the required key before subsetting\nif 'singler' in adata.obs:\n    #..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom statsmodels.stats.multitest import multipletests\n\n# Ass..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom statsmodels.stats.multitest import multipletests\n\n# Che..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Ensure the key exists before proceeding\nif 'singler' in adata.obs:\n    # Sub..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Subset the data to focus on erythroblasts\nif 'singler' in..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom s..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import spearmanr\nimport seaborn as sns\nimp..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_15.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "# Step 1: Exploratory analysis of metabolic pathways.\n# We aim to compute and examine various metabo..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n# Create violin plots..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\n# Load necessary packages\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matpl..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "# Perform differential expression analysis on RBCs\nimport scanpy as sc\n\n# Subset the data for RBCs\na..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "\n# Perform pathway enrichment analysis on the top differentially expressed genes in RBCs\nimport scan..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Filter out unnecessary categories in '..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n# Compute neighborhood..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Identify unexplored ce..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_21.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Extract ribosomal protein gene expression columns\nadata_rpl_rps = adata[:, ad..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Filter ribosomal protein genes\nribosom..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import mannwhitneyu\n\n# ..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy.stats import spearmanr\n\n# Focus analysis on CD8 T..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Focus analysis on CD8 T cells and CD14 Monocytes\ninterest..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "# Normalize and perform dimensionality reduction using Diffusion Maps\nimport scanpy as sc\n\n# Focus a..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Subset the data for the cell types of interest\ninterested_cell_types = ['CD8 ..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# Fo..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_20.ipynb",
      "total_code_cells": 9,
      "successful_cells": 9,
      "failed_cells": 0,
      "success_rate": 1.0,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Run PCA on CD14 Monocyte cells to identify variance related to COVID-19 sever..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset for Activated Granulocytes\nadata_granulocytes = adata[adata.obs['cell_..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset for Activated Granulocytes\nadata_granulocytes = adata[adata.obs['cell_..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Verify PCA is performed and use its results for UMAP embedding on the granulo..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset for Activated Granulocytes\nadata_granulocytes = adata[adata.obs['cell_..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure there are at least two distinct groups in the subs..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset for activated granulocytes and relevant cell types ..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Assert that PCA and neighbors have been computed on granulocytes\nif 'neighbor..."
        }
      ]
    },
    {
      "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_2.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Compute neighbors with additional comments r..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scvi\n\n# Prepare data for SCVI\nscvi.data.setup_anndata(adata, batch_key='Donor_full')\n\n# Trai..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Filter cells by quality metrics for high-quality analysis\ncell_threshold = 5 ..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Step 1: Prepare the data for training\nscvi.model.SCVI.setup_annd..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom anndata import AnnData\n\n# Ensure you have initialized scvi or any other ne..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport celltypist  # Corrected import statement\n\n# Refine cell type annotation ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scvi\n\n# Set seed for reproducibility\nscvi.settings.seed = 0  # Ensures reproducible model tr..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Set up the AnnData object for scVI, if not already done\nscvi.mod..."
        }
      ]
    }
  ],
  "errors": []
}