{
  "test_name": "no_documentation",
  "total_code_cells_attempted": 0,
  "total_failures": 0,
  "final_successful_cells": 95,
  "final_failed_cells": 40,
  "failure_rate": 0.0,
  "final_success_rate": 0.7037037037037037,
  "failed_fix_attempts_per_step": {},
  "analyses": [
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_3.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Filter dataset for stromal fibroblasts\nstromal_fibroblasts = adata[adata.obs[..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nfrom scanpy import pp, tl\nimport anndata\nimport scanpy as sc\nimport numpy as np\n\n# Load the pre-exi..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import anndata as ad\nimport scanpy as sc\n\n# Extract stromal fibroblasts for preliminary quality cont..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Ensure all genes in our list are present in the dataset\nex..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import numpy as np\nimport scanpy as sc\n\n# Rename genes for better understanding\npathway_score_column..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scanpy as..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scanpy as ..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scanpy as..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_2.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Define a list of ligand-receptor pairs for a..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport numpy as np\nfrom scipy.stats import wilcoxon\nfrom statsmodels.stats.multitest import multipl..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Cre..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Access the preloaded AnnData object\n# ..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Check for the presence and expression of ESR1 and PGR gene..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\nfrom sklearn.metrics import silhouette_score\n\n# ..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\nimport numpy as np\nfrom sklearn.metrics import silhouette_score\n\n# C..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\nimport numpy as np\nfrom sklearn.metrics import silhouette_score, adj..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_14.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Check if the 'cell_type'..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n# Check if 'day'..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scvi\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Prepare data for SCVI mode..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure the data structure is correctly set u..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subsample data with a random seed for reprodu..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Import sys to check resource usage for profil..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Optimize diffusion map for smooth muscle cell..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Ensure the data structure is correctly set up..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_7.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Preprocess and normalize endothelial cell dat..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom scvi.model import SCVI\n\n# Set random seed for reproducibility\nsc.settings.s..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom scvi.model import SCVI\n\n# Set random seed for reproducibility\nsc.settings.s..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Set random seed for reproducibility\nsc.settings.seed = 42\n..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom scvi.model import SCVI\n\n# Define a function for filtering and preprocessing..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom scvi.model import SCVI\n\n# Define a function for optimizing SCVI training\nde..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# ..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# ..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_6.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assuming 'adata' is already defined elsewhere in the code..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import pandas as pd\n\n# Assuming ciliated_cells from the previous step exists\n\n# Integrate metadata\nd..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Filter the dataset for ciliated epithelial cells\nadata_ciliated = adata[adata..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import pandas as pd\nimport scanpy as sc\n\n# Integrate metadata\nadata_index = adata_ciliated.obs.index..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Ensure the dataset focuses on ciliated epithelial cells\nadata_ciliated = adat..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nfrom scvi.model import SCVI\nimport scvi\nimport numpy as np\nfrom pytorch_lightning.callbacks import ..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Ensure the dataset focu..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Integrate metadata\nadat..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_15.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Quality control and filtering\nadata = adata[adata.obs['cell_type'].isin(['Unc..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "import numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Meta information for truly novel metab..."
        },
        {
          "cell_index": 10,
          "success": false,
          "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Filter for unciliated epithelial cell..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Initial cell type filtering\nadata = adata[adata.obs['cell_type'].isin(['Unci..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# 1. Validate and filter data for uncili..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Corrected filtering to ensure all 'Unciliated epithelial' types including sub..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\n\ndef comprehensive_filtering(adata, cell_types, metadata_fields):\n    \"\"\"\n    Co..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Comprehensive cell type filtering including all unciliated epithelial subtype..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_4.ipynb",
      "total_code_cells": 9,
      "successful_cells": 8,
      "failed_cells": 1,
      "success_rate": 0.8888888888888888,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Define gene lists for estrogen and progesterone signaling\nestrogen_genes = [..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom scvi.model import SCVI\n\n# Check if necessary hormone receptor genes are pre..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Filter genes, normalize counts, and log-transfor..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Focus on relevant cell types\nrelevant_cell_types = ['Unciliated epithelia', '..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Subset data to make computationally feasible initially, focusing on relevant ..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom scvi.model import SCVI\nimport seaborn as sns\nimport matplotlib.pyplot as pl..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom sklearn.decomposition import PCA\n\n# Subsample the relevant cell types for i..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom scvi.model import SCVI\nimport seaborn as sns\nimport matplotlib.pyplot as pl..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_10.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure endothelial cells are selected correctly\nendotheli..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure endothelial cells are selected correctly\nendotheli..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Select endothelial cells\nendothelial_cells = adata[adata...."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Load updated endothelial cells data\nendothelial_cells = a..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Select..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Ensure endothelial cells ..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Load endothelial cells\nendothelial_ce..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\n\n# Isolate endothelial cells\ne_cells = adata[ada..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_12.ipynb",
      "total_code_cells": 9,
      "successful_cells": 4,
      "failed_cells": 5,
      "success_rate": 0.4444444444444444,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\nimport pandas as pd\n\n# Ensure data normalization and log transformat..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Use SCVI latent representation for graph construction with customized paramet..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "# Construct k-nearest neighbors graph for smooth_muscle_data\nsc.pp.neighbors(smooth_muscle_data, n_n..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "# Subsample data for efficient graph construction\nsmooth_muscle_data_sub = adata[(adata.obs['day'].i..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "# Filter smooth muscle cells across relevant cycle days 17, 20, and 22 and include donor information..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "# Filter for smooth muscle cells from days 17, 20, and 22, and include donor information\nfiltered_sm..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import scanpy as sc\nimport scvi\n\n# Load the SCVI-trained latent representation\nlatent_representation..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset smooth muscle cells from relevant days and donors\nsmooth_..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_8.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Inspect the structure of the AnnData object\na..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Placeholder gene sets, replace with a..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Define cell cycle genes as a dictionary for better maintainability\ncell_cycle..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Conduct differential expression analysis\nsc.tl.rank_gene..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import silhouette_score\n\n#..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\nfrom anndata import AnnData\n\n# Example initializ..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport numpy as np\nfrom anndata import AnnData\n\n# Example initializ..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nfrom sklearn.mixture import GaussianMixture\nimport matplotlib.pyplot as plt\n\n# ..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_13.ipynb",
      "total_code_cells": 9,
      "successful_cells": 7,
      "failed_cells": 2,
      "success_rate": 0.7777777777777778,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Quality control step\nadata.var['mt'] = adata.var_names.str.startswith('MT-')\n..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Quality control for mitochondria content and gene count\ndata = adata.copy()\nd..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# SCTransform Normalization\nadata.var['mt'] = adata.var_names.str.startswith('M..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Filter the dataset to include only circadian rhythm-related genes\ncircadian_..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport numpy as np\n\n# Create or load your AnnData object appropriat..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# SCTransform Normalization\nadata.var['mt'] = adata.var_names.str.startswith('M..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Ensure the adata object is already present in the environment\n# ..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_9.ipynb",
      "total_code_cells": 9,
      "successful_cells": 5,
      "failed_cells": 4,
      "success_rate": 0.5555555555555556,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\n# Import necessary libraries\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as pl..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "# Import necessary libraries\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Check and..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the gene lists\nmetabolic_genes, str..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "\nimport scanpy as sc\n\n# Filter ciliated epithelial cells\nec_adata = adata[adata.obs['cell_type'] == ..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Define the comprehensive_gene_list fu..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport scvi\n\n# Ensure adata is copied before processing\nadat..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport scvi\n\n# Ensure adata is copied before processing\nadat..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport scvi\n\n# Ensure adata is copied before processing\nadat..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_11.ipynb",
      "total_code_cells": 9,
      "successful_cells": 3,
      "failed_cells": 6,
      "success_rate": 0.3333333333333333,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Visualize UMAP projections colored by donor ..."
        },
        {
          "cell_index": 7,
          "success": false,
          "code_preview": "\nimport scanpy as sc\n\n# Preprocessing: Normalize and scale the data\nsc.pp.normalize_total(adata, tar..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport s..."
        },
        {
          "cell_index": 13,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom sklearn.metrics import silhouette_score\n\n# Ensure data is preprocessed\nada..."
        },
        {
          "cell_index": 16,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom sklearn.metrics import silhouette_score\nimport pandas as pd\n\n# Ensure data..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nfrom sklearn.metrics import silhouette_score\nimport pandas as pd\n\n# Ensure data..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure data is preprocessed\nadata_ciliated =..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "\nimport scanpy as sc\nimport scvi\nimport pandas as pd\nimport numpy as np\n\n# Ensure data is preprocess..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_1.ipynb",
      "total_code_cells": 9,
      "successful_cells": 9,
      "failed_cells": 0,
      "success_rate": 1.0,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Filter data to retain only lymphocytes and macrophages\nsubset = ..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc \nimport scvi \n\n# Filter data to retain only lymphocytes and macrophages\nsubset =..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\n\n# Filter data to retain only lymphocytes and macrophages\nsubset = a..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import scanpy as sc\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport p..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\n# Filte..."
        },
        {
          "cell_index": 19,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\nfrom scipy.stats import ks_2samp\nimport matplotlib.pyplot as plt\n\n# ..."
        },
        {
          "cell_index": 22,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\n\n# Filter data to retain only lymphocytes and macrophages\nsubset = a..."
        },
        {
          "cell_index": 25,
          "success": true,
          "code_preview": "import scanpy as sc\nimport scvi\nimport matplotlib.pyplot as plt\n\n# Filter data to retain only lympho..."
        }
      ]
    },
    {
      "notebook_path": "endo_ablation_082425/test_results_no_documentation_20250824_161516/outputs/test_no_documentation_20250824_161536/test_no_documentation_analysis_5.ipynb",
      "total_code_cells": 9,
      "successful_cells": 6,
      "failed_cells": 3,
      "success_rate": 0.6666666666666666,
      "cell_details": [
        {
          "cell_index": 1,
          "success": true,
          "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
        },
        {
          "cell_index": 4,
          "success": true,
          "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\nadata_smooth_muscle = adata[adata.obs['cell_type'] == 'Smo..."
        },
        {
          "cell_index": 7,
          "success": true,
          "code_preview": "import scanpy as sc\n\n# Filter and quality control\nsc.pp.filter_cells(adata_smooth_muscle, min_genes=..."
        },
        {
          "cell_index": 10,
          "success": true,
          "code_preview": "\nimport scvi\nimport scanpy as sc\nimport pandas as pd\n\n# Preliminary filtering and quality control fo..."
        },
        {
          "cell_index": 13,
          "success": true,
          "code_preview": "import random\nimport pandas as pd\n\n# Fix random seed for reproducibility\nrandom.seed(0)\n\n# Stratifie..."
        },
        {
          "cell_index": 16,
          "success": true,
          "code_preview": "import scanpy as sc\nimport pandas as pd\nimport random\n\n# Stratified sampling smooth muscle cells bas..."
        },
        {
          "cell_index": 19,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Perform filtering and normalization on smooth muscle cell data\nsc.pp.filter_c..."
        },
        {
          "cell_index": 22,
          "success": false,
          "code_preview": "import scanpy as sc\n\n# Filter and quality control for smooth muscle cells in adata\nadata_smooth_musc..."
        },
        {
          "cell_index": 25,
          "success": false,
          "code_preview": "import scvi\nimport scanpy as sc\n\n# Setup and Train SCVI on smooth muscle cell data\nadata_smooth_musc..."
        }
      ]
    }
  ],
  "errors": []
}