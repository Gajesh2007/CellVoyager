{
  "timestamp": "2025-08-08T09:27:19.511028",
  "summary": {
    "no_critique_20250807": {
      "final_success_rate": 0.7453703703703703,
      "total_failure_rate": 0.5760869565217391,
      "final_successful_cells": 161,
      "final_failed_cells": 55,
      "total_failures": 212,
      "total_attempts": 368,
      "num_analyses": 24
    },
    "baseline_20250807": {
      "final_success_rate": 0.6190476190476191,
      "total_failure_rate": 0.7565011820330969,
      "final_successful_cells": 117,
      "final_failed_cells": 72,
      "total_failures": 320,
      "total_attempts": 423,
      "num_analyses": 21
    },
    "no_vlm_20250807": {
      "final_success_rate": 0.7333333333333333,
      "total_failure_rate": 0.6295180722891566,
      "final_successful_cells": 132,
      "final_failed_cells": 48,
      "total_failures": 209,
      "total_attempts": 332,
      "num_analyses": 20
    },
    "no_vlm_no_critique_20250807": {
      "final_success_rate": 0.8011695906432749,
      "total_failure_rate": 0.5494880546075085,
      "final_successful_cells": 137,
      "final_failed_cells": 34,
      "total_failures": 161,
      "total_attempts": 293,
      "num_analyses": 19
    }
  },
  "detailed_results": {
    "no_critique_20250807": {
      "test_name": "no_critique_20250807",
      "total_code_cells_attempted": 368,
      "total_failures": 212,
      "final_successful_cells": 161,
      "final_failed_cells": 55,
      "failure_rate": 0.5760869565217391,
      "final_success_rate": 0.7453703703703703,
      "failed_fix_attempts_per_step": {
        "covid_ablation_080725/test_results_no_critique_20250807_122504/logs/test_no_critique_log_20250807_122524.log": {
          "1": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "2": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 1
          },
          "3": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 2,
            "7": 1,
            "8": 3
          },
          "4": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "5": {
            "1": 0,
            "2": 0,
            "3": 1,
            "4": 0,
            "5": 2,
            "6": 3,
            "7": 1,
            "8": 1
          },
          "6": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 0,
            "8": 0
          },
          "7": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "8": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "9": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "10": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "11": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 1,
            "6": 3,
            "7": 0,
            "8": 0
          },
          "12": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "13": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 1,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "14": {
            "1": 0,
            "2": 0,
            "3": 2,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "15": {
            "1": 1,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "16": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 1,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "17": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 1,
            "7": 3,
            "8": 0
          },
          "18": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "19": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "20": {
            "1": 3,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 1,
            "7": 0,
            "8": 0
          },
          "21": {
            "1": 1,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "22": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 0,
            "5": 1,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "23": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 0
          },
          "24": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          }
        }
      },
      "analyses": [
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_5.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nligand..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Focus..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define extended ligand-r..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform clustering using the Leiden algorithm\nsc.pp.neighbors(adata_subset, ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Annotate clusters\nmarker_genes = {'CD8 T': ['CD8A', 'CD8B'], 'CD14 Monocyte'..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\n# Conduct differential expression analysis for the novel population and adjacent UMAP clusters\ndiff..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Focus on neutrophil subpopulation\nneutrophil_indices = adata.obs_names[adata..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd  # Impor..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_3.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\n# Filter out low-quality cells based on mitochondrial content, rRNA percentage, and detected gene c..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Normalize the data and find highly variable genes\nsc.pp.normalize_total(adata..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Filter out low-quality cells based on mitochondrial content, ribosomal RNA (r..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Adjust filtering parameters based on presentation to include more high-qualit..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Visualize QC metrics to decide on filtering p..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform a PCA on the filtered data and compute the neighborhood graph\ndata =..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Adjusted the number of PCA components to be strictly less than min(n_samples..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Im..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_8.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Step 1: UMAP visualization based on cell surf..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Clustering immune cells using the Leiden algorithm for subpopulation identifi..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subcluster using the Leiden algorithm based on highly variable genes\nsc.pp.h..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure 'Healthy' is a valid category in the groupby variable\nhealthy_mask = ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Define inflammation-related pathways (gene sets) for scoring\ninflammation_gen..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nfrom scipy.stats import pearsonr\nimport pandas as pd\n\n# Calculate Pearson correl..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import pandas as pd\nimport scanpy as sc\nfrom scipy.stats import pearsonr\n\n# Focus on CD4 and CD8 T c..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter for CD14 Monocytes and CD8 T cells\nselected_cells = adata.obs['cell_ty..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_23.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Isolate NK cell subsets and analyze only those\nnk_cells = adata[adata.obs['ce..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scvi\n\n# Prepare the data for SCVI model\nscvi.data.setup_anndata(nk_cells)\n\n# Create and trai..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Preprocess the NK cell data using SCTransform-like methods\nsc.pp.normalize_to..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Prepare the data for SCVI model\nscvi.data.setup_anndata(nk_cells..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Import anndata\nimport anndata\n\n# Prepare adata for analysis\nadat..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport anndata\nimport scvi\n\n# Prepare adata with necessary NK subsets\nadata = a..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Assuming the 'adata' variable is defined earlier in the code and..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\nfrom s..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_9.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n\n# Define S-phase and G2M-phase marker genes\ns_genes = ['MCM5', 'PCNA', 'TYMS', 'FEN1', 'MCM2', 'MC..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\ns_genes_updated = ['MCM5', 'PCNA', 'TYMS', 'FEN1', 'MCM2', 'MCM4', 'RRM1', 'UNG', 'GINS2', 'MCM6', ..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\nsc.pp.neighbors(adata, use_rep='X_pca', n_neighbors=15, n_pcs=30)\nsc.tl.diffma..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport anndata\nfrom scvi.model import SCVI\n\n# Assuming 'adata' is already loade..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport anndata\n\n# Assume that `adata` is already de..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is already loaded with AnnData\nscvi.model.SCVI...."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming 'adata' is already loaded with AnnData\nscvi.data.setup_..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Plotting pseudotime tr..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_15.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Calculate splicing-relate..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n# Differential expression analysis\ncovid_..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Resource for differential splicing ana..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Suppose `adata` is previo..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Perform clustering analysis on monocytes and T cells\nsc.pp..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Validate convergence and quality of the nearest-neighbor g..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Filter for CD16 Monocytes\ncd16_monocytes = adata[adata.o..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Filter dataset to focus on T cell subsets\ncd4_tcells = a..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_22.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Exploratory analysis of RNA splicing patterns\n# ad = sc.read_h5ad('../exampl..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\nsc.tl.umap(adata)\nsc.pl.umap(adata, color='cell_type_coarse', title='UMAP of Ce..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\nfrom sklearn.decomposition import PCA\nfrom scipy.spatial.dis..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Normalize and find highly variable genes\nsc.pp.normalize_total(adata, target_..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Since scvelo is not allowed, we cannot import it. We will proceed with avail..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data for CD14 and CD16 Monocytes\nsubset = adata[adata.obs['cell_type_c..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Subset data for CD14 and CD16 Monocytes\nsubset = adata[a..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data for CD14 and CD16 Monocytes separately\ncd14_monocytes = adata[ada..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_16.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Preprocessing: Scale data and log-transform\nsc.pp.normalize_total(adata, targ..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform UMAP\nsc.pp.neighbors(adata, use_rep='X')\nsc.tl.umap(adata)\nsc.pl.umap..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform differential expression analysis on specific cell types focusing on ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset gene groups related to mitochondrial and ribosomal function\nmt_genes ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Update gene selection to broaden the criteria to include receptor and broade..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Step 1: Calculate the neighborhood graph using the PCA components\nsc.pp.neig..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Subset the data for monocytes and T cells\nmonocytes_t_cells = adata[adata.ob..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Subset the data to foc..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_10.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Prior filtering - defining high quality data\nsc.pp.filter_cells(adata, min_ge..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assuming the data has already been filtered and normalized\n# Calculate and vi..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Subset the dataset to ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Su..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter cells, ensuring high quality\nsc.pp.filter_cells(adata, min_genes=200)\n..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform PCA for dimensionality reduction\nsc.tl.pca(adata, svd_solver='arpack'..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Verify cluster identities with known markers\n..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_21.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Subset the data for COVID-19 patients\ncovid_data = adata..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import fisher_exact\n\n# ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform dimensionality reduction on the full dataset\nsc.pp.neighbors(adata, n..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Focus on CD8 T and pDCs\ncd8_pdc_data = adata[adata.obs['cell_type_fine'].isin..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Annotate clusters with known immune markers\ndef annotate..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform sex-specific differential expression analysis on Monocytes and T Cell..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Step 2: Examine ligand-receptor interactions in CD8 T cel..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy.spatial.distance import pdist..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_20.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scvi\nimport anndata\n\nadata = anndata.AnnData(...)  # You need to ensure adata is properly in..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Preprocess the data\ndata = sc.read('../example/covid19.h5ad')\nsc.pp.filter_c..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Compute a UMAP\nsc.pp.neighbors(adata, n_neighbors=15, n_pcs=30)\nsc.tl.umap(a..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Recompute neighbors for focused cell types\nadata_monot = adata[adata.obs['cel..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Identify differentially expressed genes relevant to ligand-receptor interacti..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport scipy.stats as stats\nfrom matplot..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset the data for targeted cell types\nadata_target = ada..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\n# S..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_13.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Perform PCA on the gene expression data\nimport scanpy as sc\n\n# Filter data to include only specif..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming `adata_monocytes_cd8` is already defined and loaded\n\n# Calculate th..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assuming `adata` is already defined\n\n# Filter data for relevant cell types an..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming `adata_covid` is already defined from previous steps\n\n# Running the..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform cell cycle scoring\ns_genes = ['MCM5', 'PCNA', ...]  # List of S phase..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Filter the data for COVID-19 patients focusing on CD14 Monocytes\nadata_monocy..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Filter data for CD14 Monocytes and CD8 T cells\nadata_monocytes_cd8 = adata[ad..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Apply factor analysis for latent structure in COVID-19 aff..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_19.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Select cells of specific immune cell ..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset data for monocytes and CD8 T cells\nmon..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform differential expression analysis on CD8 T cells and CD14 monocytes\nsc..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Perform pathway enrichment analysis within CD14 Monocyte..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Identify and subset for CD14 Monocytes..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport anndata\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Assume 'ad..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Subset data for NK cells and CD8 T cells\nnk_cd8_data = a..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform pathway enrichment analysis on NK cells\nnk_data = adata[adata.obs['ce..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_7.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 1: Exploratory Data Analysis\n# Visualizing metadata attributes\nsc.pl.uma..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nadata.var['mt'] = adata.var_names.str.startswith('MT-')  # Ensure mitochondrial genes are identifie..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "adata.var['mt'] = adata.var_names.str.startswith('MT-')  # Verify mitochondrial genes again\nadata.ob..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is already defined and loaded with the data.\ns_genes = ['ge..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Identify transcription factor genes to analyze\ntf_genes_list = ['TF_A', 'TF_..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "from scipy.stats import spearmanr\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset to COVID patients to compare severe vs non-severe\nadata_severe = adata..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import d..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_12.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Violin plot of IFN1 across Ventilated catego..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Perform ligand-receptor interaction analys..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import pandas as pd\nimport scipy.stats as stats\n\n# Calculate correlation coefficients for ligand-rec..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 2: Subcluster monocyte and T cell populations\ntarget_cell_types = adata...."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "sc.tl.rank_genes_groups(adata_subset, 'leiden', method='wilcoxon', n_genes=20)\nsc.pl.rank_genes_grou..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Pathway enrichment analysis using ranked genes\nrank_genes..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Define relevant populations for pseudotime analysis\nrelevant_cells = adata.ob..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Filter for monocytes\nmonocyte_cells = adata.obs['cell_type_fine'].isin(['CD14..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_18.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Initiate exploratory data analysis focusing ..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Identify relevant membrane protein genes and subset data by immune cell types..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\n# Perform statistical t..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import statsmodels.api as sm\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\n\n# Perform Tu..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Train SCVI model to capture representations of cell states\nscvi...."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Exploring differential expression between cell types\ncell_types_of_interest ..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Identifying differentially expressed genes\ncell_types_of..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Filter based on cytotoxic genes\ncytotoxic_genes = ['GZMB'..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_14.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nfiltered_cells = adata[adata.obs['percent_mt'] < 15]\n\nimport matplotlib.pyplot as plt\nfig, ax = plt..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\n# Calculate total mitochondrial gene expression and add it to adata.obs\nadata.obs['total_mt_express..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport pandas as pd\n\ncd8_t_cells = adata[adata.obs['cell_type_coarse'] == 'CD8 T']\nmonocytes = adat..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "# Step 2: Re-evaluate ligand-receptor analysis with expanded pairs\nimport pandas as pd\nimport numpy ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\n# Step 2: Cell-type specific differential expression for mitochondrial genes\nimport scanpy as sc\n\n#..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import numpy as np\nfrom scipy.stats import spearmanr\n\n# Define ISGs of interest\nisgs = ['IFI27', 'IF..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Subset Monocytes and f..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Select key immune cell types of interest for both cell types\nmonocytes = adat..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_17.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\n# Step 1: Filter the dataset to include only COVID-19 patients data with 'Ventilated' and 'NonVent'..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\n# Step 1: Correct the filtering step to include only COVID-19 patient data with 'Ventilated' and 'N..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "# Correct the filtering step to include only COVID-19 patient data with 'Ventilated' and 'NonVent' e..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 2: Perform gene signature scoring\n# Define a sample immune gene set (e.g..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport scanpy as sc\nimport matplotlib...."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Define oxidative phosphorylation-related gene set\noxphos_..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Step 1: Perform clustering on Monocytes and CD8 T cells\nadata_covid_vent_mon..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Ensure that 'Status' e..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_2.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Preprocessing the data\nsc.pp.filter_cells(ada..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset the data for CD8 T cells and dendritic cells\nadata_cd8_dc = adata[(ada..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Build neighborhood graph and perform Leiden clustering\nsc.pp.neighbors(adata_..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Annotate clusters with known immune markers\n# Assuming 'leiden' key was added..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load data into AnnData ob..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset the data for CD8 T cells and dendriti..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nfrom scvi.model import SCVI\n\n# Subset the data ..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Gene signatures for metabolic pathways\nmetab..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_1.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Focus on mitochondrial genes\ngenes_of_interes..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\n# Perform cell type-specific differential expression analysis\nimport scanpy as sc\n\n# Subset data to..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scvi\n\n# Prepare the data for scvi\nscvi.data.setup_anndata(adata_tcells, batch_key='cell_type..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Focus on interferon-stimulated genes (ISGs)\nadata_isgs = adata[:, adata.var...."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Focus on mitochondrial genes\nmt_genes = adata..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Normalize and log-transform the data focusing on interferon-stimulated genes\n..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset data to focus on monocytes and T cells\nadata_monocytes = adata[adata...."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy.stats import zscore\n\n# Co-expression analysis of ..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_11.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Display the distributi..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\n# Calculate the ligand-receptor pairs in the given cell types.\nimport numpy as np\nimport pandas as ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define stress response g..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Load the data\nadata_covid = adata[adata.obs['Status'].isin(['COVID', 'Healthy..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure the raw attribute is set\nclusters_of_interest = adata_covid[adata_cov..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimpor..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom s..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Filter for COVID-19 samples and focus on ISGs\nisg_genes = ['STAT1', 'STAT2',..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_6.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Identify a list of cytokine genes of interest..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform clustering\nsc.tl.leiden(adata, resolution=0.5, key_added='leiden')\nsc..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Annotate clusters based on marker genes\nmarker_genes = {'CD14 Monocyte': ['C..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Perform pseudotime analysis\nsc.tl.paga(adata, groups='leiden')\nsc.pl.paga(ad..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Perform clustering with a focus on regulatory T cells\nreg_t_adata = adata[ad..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Subset data for regulatory T cells\nreg_t_adata =..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# UMAP Visualization of Inte..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Subset data for monocytes\n..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_4.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 1: Quality Control\nadata.var['mt'] = adata.var_names.str.startswith('MT-..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 2: Filter Cells\nmitochondrial_threshold = 10  # percentage\nmin_features ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 2: Perform PCA and UMAP embedding with batch corrections\nsc.pp.pca(filte..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure the correct key exists in adata.obs\ncorrect_key = 'donor_id'  # Repla..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter for CD14 Monocyte cells\nmonocyte_adata = adata[adata.obs['cell_type_co..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data for CD14 Monocytes and T cells\nmonocyte_adata = adata[adata.obs['..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Perform cell-cell communication analysis using ligand-re..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# De..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_critique_20250807_122504/outputs/test_no_critique_20250807_122524/test_no_critique_analysis_24.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Step 1: Perform exploratory differential expression analysis for neutrophils\nimport scanpy as sc\n..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "# Revised Step 1: Correct the grouping issue\nimport scanpy as sc\n\n# Check and correct the 'Status' v..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Filter the dataset for monocytes and T cells\nmonocytes_t..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Filter the dataset for monocytes and T cells using 'Admis..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform subclustering of monocytes and T cells separately using UMAP\nmonocyte..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Filter the data for monocytes and T cells\nmonocytes_tcells = adata[(adata.ob..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter for CD14 Monocytes in severe COVID-19 and healthy groups\ncd14_monocyte..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Filter the dataset for monocytes and T cells classified ..."
            }
          ]
        }
      ],
      "errors": []
    },
    "baseline_20250807": {
      "test_name": "baseline_20250807",
      "total_code_cells_attempted": 423,
      "total_failures": 320,
      "final_successful_cells": 117,
      "final_failed_cells": 72,
      "failure_rate": 0.7565011820330969,
      "final_success_rate": 0.6190476190476191,
      "failed_fix_attempts_per_step": {
        "covid_ablation_080725/test_results_baseline_20250807_122503/logs/test_baseline_log_20250807_122519.log": {
          "1": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "2": {
            "1": 3,
            "2": 3,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 1,
            "7": 3,
            "8": 3
          },
          "3": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 0
          },
          "4": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 0,
            "7": 0,
            "8": 2
          },
          "5": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 3
          },
          "6": {
            "1": 0,
            "2": 3,
            "3": 3,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 1,
            "8": 0
          },
          "7": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 1,
            "8": 3
          },
          "8": {
            "1": 0,
            "2": 0,
            "3": 2,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "9": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 2,
            "7": 3,
            "8": 0
          },
          "10": {
            "1": 3,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 2
          },
          "11": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 0,
            "7": 0,
            "8": 3
          },
          "12": {
            "1": 1,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "13": {
            "1": 3,
            "2": 3,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 1
          },
          "14": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 0,
            "5": 0,
            "6": 1,
            "7": 3,
            "8": 0
          },
          "15": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "16": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 1,
            "6": 3,
            "7": 0,
            "8": 3
          },
          "17": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "18": {
            "1": 0,
            "2": 3,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 2,
            "8": 0
          },
          "19": {
            "1": 0,
            "2": 3,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "20": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 2,
            "7": 0,
            "8": 0
          },
          "21": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          }
        }
      },
      "analyses": [
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_14.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Use the information in the dataset to subset ..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Use previously prepared subset of \u03b3\u03b4 T cells\nsubset_gd_T_cells = adata[adata...."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Utilize subset of \u03b3\u03b4 T cells from pri..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Filter dataset to include \u03b3\u03b4 T and CD8..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Utilize subset of \u03b3\u03b4 T cells using pre-defined conditions\nsubset_gd_T_cells =..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Use pre-subsetted \u03b3\u03b4 T cells subset\nsubset_gd_T_cells = adata[adata.obs['cel..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Assuming 'adata' is already loaded in..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Subset the data to include \u03b3\u03b4 T and CD..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_7.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Subset the data for rare ..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset the data for monocytes, T cells, and d..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset the data for relevant cell types\nadata_mon_tcells =..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Assuming `adata` is an AnnData o..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset the data for innate immune cells\nadata..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Perform differential expression analysis for clusters us..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define ISG list extracte..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Subset data by admission..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_16.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nfrom anndata import AnnData\nimport scanpy as sc\n\n# Assume 'adata' is defined prior to this code sni..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import numpy as np\nimport pandas as pd\nfrom scipy.stats import zscore\nimport scanpy as sc\n\n# Assume ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "# Step 1: Validate senescence-related gene sets and identify differently expressed genes in monocyte..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\n# Step 2: Senescence Pathway Enrichment Analysis\n\nimport scanpy as sc\nimport pandas as pd\nimport nu..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\n# Step 1: Differential Gene Expression Analysis focusing on novel inflammatory pathways\n\nimport sca..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\n# Step 1: Cell-Cell Communication Analysis\nimport scanpy as sc\nimport seaborn as sns\nimport matplot..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subset data for CD14 Monocytes\nadata_monocytes = adata[ad..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import ks_2..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_6.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Initial metadata exploration of Tregs in both COVID-19 and Healthy individual..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\n# Import the necessary library\nimport scanpy as sc\n\n# Subset data for Tregs\nadata_Treg = adata[adat..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Step: Subset data and perform clustering on Tregs\nadata_Treg = adata[adata.o..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Step 1: Subset and preprocess Treg cells with emphasis on quality control\nad..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Step 1: Subset Treg cells and preprocess\nadata_Treg = adata[adata.obs['cell_..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.data import setup_anndata\nfrom scvi.model import SCVI\n\n# Subset Treg ..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Step 1: Subset and preprocess Treg cells with a focus on metadata and qualit..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 1: Perform quality control on Treg cells\nadata_Treg = adata[adata.obs['c..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_5.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Ensure mitochondrial g..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport matplotlib.pyplot as plt\n\n# Ensure you are using compatible ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport anndata\n\n# Load your ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Identifying highly variable genes specific f..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Check for required colum..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Subset to class-switched..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport anndata\n\n# Ensure the anndata object is in place\nasse..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport a..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_13.ipynb",
          "total_code_cells": 9,
          "successful_cells": 2,
          "failed_cells": 7,
          "success_rate": 0.2222222222222222,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport matplotlib.pyplot as plt\n\n# Assume adata is already loaded\ns..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport matplotlib.pyplot as plt\n\n# Setup SCVI model focusing on lnc..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Adjusting SCVI model setup for CD4 and CD8 T cells\nadata_cd4_cd8..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Load the AnnData object 'adata_cd4_cd8' from a file\nadata_cd4_cd8 = sc.read(..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the data to include only CD4 and CD8 T cells\nadata_cd4_cd..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport scvi\n\n# Subset the data to include only CD4 and CD8 ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the data to include only CD4 and CD8 T cells\nadata_cd4_cd..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset the data to include only CD4 and CD8 T cells\nadata_cd4_cd8 = adata[ad..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_18.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset the anndata object to include only CD4 and CD8 T cells\nadata_cd4_cd8 ..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom s..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Subset the AnnData object..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Subset the AnnData object to include only CD4..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Perform subclustering on the most variable clusters at res..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import mannwhitneyu\n\n# Subset the anndata object for CD4/CD8 T..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset the data for CD4 and CD8 T cells\nadata_cd4_cd8 = adata[adata.obs['cel..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Prepare the data for DE analysis between ICU ..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_10.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure adequate representation of developing neutrophils\n# Assume developing..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Isolate activated granulocytes\nadata_activated_granulocytes = adata[adata.ob..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform Leiden clustering on activated granulocytes\nadata_activated_granulocy..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import wilcoxon\n\n# Ensure data integrity a..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import fisher_exact\n\n# ..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Activated GRANULOCYTE Subset\nadata_activated_granulocytes..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import wilcoxon\nimport pandas as pd\nimport numpy as np\n\n# ISG ..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import wilcoxon\nimport numpy as np\n\n# Subs..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_19.ipynb",
          "total_code_cells": 9,
          "successful_cells": 2,
          "failed_cells": 7,
          "success_rate": 0.2222222222222222,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "# Exploratory Analysis of Interferon-Stimulated Genes by Admission and Health Status\nimport scanpy a..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the AnnData for monocytes and T-cells using 'cell_type_co..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport torch\n\n# Subset the AnnData for CD8 T, CD4 T, and CD14 Monoc..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming adata is already defined in the context\n# Subset the An..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the AnnData for GD T cells and pDC using 'cell_type_fine'..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming `adata` is defined somewhere else in the user's code en..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the AnnData for NK cells and B cells using 'cell_type_fin..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Ensure `adata` is defined before using it.\n\n# Subset the AnnData..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_1.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Visualize UMAP embeddings colored by cell ty..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Assuming 'adata' is defined previousl..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter for CD14+ and CD16+ monocytes\nmonocytes = adata[adata.obs['cell_type_c..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Assuming adata is already defined els..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Use the existing monocyte filtering a..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming 'adata' is defined and populated with relevant ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport matplotlib.pyplot as plt\n\n# Fit SCVI model f..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Filter for CD14+ and CD16+ monocytes\nmonocyt..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_9.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Exploratory analysis of QC metrics\nif 'perc..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n\n# Subset cells by Adm..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotli..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n# Subset data f..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nfrom __future__ import annotations\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimpor..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport seaborn a..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport anndata as ad\n\n# Initialize and train SCVI m..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nfrom scipy import stats\nimport pandas as pd\nimport seaborn as..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_17.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Import relevant libraries\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as p..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "# Subset the data to focus on specific granulocyte subtypes, with an emphasis on eosinophils\nadata_g..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Differential expression ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scip..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Focus..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Define lists of genes contributing to the metabolic scor..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Diffe..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_4.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset to only developing neutrophil populations\nneutrophils = adata[adata.o..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Subset to only developing neutrophil populations\nneutroph..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset the data to include monocytes and developing neutrophils for sufficie..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "# Refine clustering and annotate subpopulations\nneutrophils_and_monocytes = adata[adata.obs['cell_ty..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Subset data by relevant cell types and ventilated status\nneutrophils_and_mon..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Subset data by relevant cell types and ventilation status..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\n# Annotate clusters based on known immune markers like CD14, CD16, and T cell markers\nimport scanpy..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\n# Subset data accurately for T cells and monocytes, checking available labels\nmonocytes_and_tcells ..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_8.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Step 1: Perform cell type-specific clustering using Leiden algorithm.\n# Note..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform differential expression analysis on identified T cells and Monocytes ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimp..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom ..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.cluster.hierarchy..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Ensure the data is normal..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\nimport scanpy as sc\n\n# Setup anndata for scVI with batch correction\nscvi.data.setup_ann..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Ensure 'adata' is defined, possibly w..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_3.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\nfrom scipy.stats import mannwhitneyu\n\n# Define an interferon-related gene set fr..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Subset data to monocytes and T cells based on 'c..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Subset the data to focus on monocytes and T cells\nadata_m..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport anndata\nimport numpy as np\nfrom scvi.model import SCVI\n\n# Annotate monoc..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport scvi\n\n# Subset data to monocytes and T cells based on..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Setup anndata for scVI and train the model\nscvi.model.SCVI.setup..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom scvi.model import SCVI\n\n# Subset and filter to focus on..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Load curated list of validated interferon-stimulated gene..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_12.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure 'mitochondrial' genes are identified in var before calculating metric..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\n# SCVI model training for dimensionality reduction\nimport scvi\nimport scanpy as sc\n\n# Ensure anndat..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport celltypist\nimport scanpy as sc\n# Load predictor model\nmodel = celltypist.models.download_mod..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Re-log normalize and scale the data to address warnings and prepare for anal..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Check for required metadata columns presence\nrequired_columns = ..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Subset the data to focus on CD4 T cells and erythroblasts\ncd4_er..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Specify S and G2/M phase marker genes\ns_genes = ['MCM5', ..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Sub..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_11.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Check for the required keys before subsetting\nif 'cell_type_coarse' in adata...."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Check for the required key before subsetting\nif 'singler' in adata.obs:\n    #..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom statsmodels.stats.multitest import multipletests\n\n# Ass..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom statsmodels.stats.multitest import multipletests\n\n# Che..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure the key exists before proceeding\nif 'singler' in adata.obs:\n    # Sub..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Subset the data to focus on erythroblasts\nif 'singler' in..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom s..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import spearmanr\nimport seaborn as sns\nimp..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_15.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "# Step 1: Exploratory analysis of metabolic pathways.\n# We aim to compute and examine various metabo..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n# Create violin plots..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\n# Load necessary packages\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matpl..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "# Perform differential expression analysis on RBCs\nimport scanpy as sc\n\n# Subset the data for RBCs\na..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\n# Perform pathway enrichment analysis on the top differentially expressed genes in RBCs\nimport scan..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Filter out unnecessary categories in '..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n# Compute neighborhood..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Identify unexplored ce..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_21.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Extract ribosomal protein gene expression columns\nadata_rpl_rps = adata[:, ad..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Filter ribosomal protein genes\nribosom..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import mannwhitneyu\n\n# ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy.stats import spearmanr\n\n# Focus analysis on CD8 T..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Focus analysis on CD8 T cells and CD14 Monocytes\ninterest..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "# Normalize and perform dimensionality reduction using Diffusion Maps\nimport scanpy as sc\n\n# Focus a..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Subset the data for the cell types of interest\ninterested_cell_types = ['CD8 ..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# Fo..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_20.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Run PCA on CD14 Monocyte cells to identify variance related to COVID-19 sever..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset for Activated Granulocytes\nadata_granulocytes = adata[adata.obs['cell_..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset for Activated Granulocytes\nadata_granulocytes = adata[adata.obs['cell_..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Verify PCA is performed and use its results for UMAP embedding on the granulo..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset for Activated Granulocytes\nadata_granulocytes = adata[adata.obs['cell_..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Ensure there are at least two distinct groups in the subs..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset for activated granulocytes and relevant cell types ..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assert that PCA and neighbors have been computed on granulocytes\nif 'neighbor..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_baseline_20250807_122503/outputs/test_baseline_20250807_122519/test_baseline_analysis_2.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# Compute neighbors with additional comments r..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport scvi\n\n# Prepare data for SCVI\nscvi.data.setup_anndata(adata, batch_key='Donor_full')\n\n# Trai..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter cells by quality metrics for high-quality analysis\ncell_threshold = 5 ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Step 1: Prepare the data for training\nscvi.model.SCVI.setup_annd..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom anndata import AnnData\n\n# Ensure you have initialized scvi or any other ne..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport celltypist  # Corrected import statement\n\n# Refine cell type annotation ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scvi\n\n# Set seed for reproducibility\nscvi.settings.seed = 0  # Ensures reproducible model tr..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Set up the AnnData object for scVI, if not already done\nscvi.mod..."
            }
          ]
        }
      ],
      "errors": []
    },
    "no_vlm_20250807": {
      "test_name": "no_vlm_20250807",
      "total_code_cells_attempted": 332,
      "total_failures": 209,
      "final_successful_cells": 132,
      "final_failed_cells": 48,
      "failure_rate": 0.6295180722891566,
      "final_success_rate": 0.7333333333333333,
      "failed_fix_attempts_per_step": {
        "covid_ablation_080725/test_results_no_vlm_20250807_122503/logs/test_no_vlm_log_20250807_122518.log": {
          "1": {
            "1": 3,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 0,
            "8": 0
          },
          "2": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 0,
            "7": 0,
            "8": 1
          },
          "3": {
            "1": 1,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 1,
            "7": 3,
            "8": 3
          },
          "4": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 2,
            "5": 0,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "5": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "6": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "7": {
            "1": 0,
            "2": 0,
            "3": 2,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 0,
            "8": 0
          },
          "8": {
            "1": 3,
            "2": 0,
            "3": 0,
            "4": 1,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 3
          },
          "9": {
            "1": 0,
            "2": 2,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "10": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "11": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 3
          },
          "12": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 0,
            "5": 3,
            "6": 0,
            "7": 3,
            "8": 3
          },
          "13": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "14": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 1,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "15": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "16": {
            "1": 0,
            "2": 0,
            "3": 1,
            "4": 3,
            "5": 0,
            "6": 1,
            "7": 0,
            "8": 0
          },
          "17": {
            "1": 0,
            "2": 1,
            "3": 0,
            "4": 1,
            "5": 0,
            "6": 2,
            "7": 0,
            "8": 0
          },
          "18": {
            "1": 0,
            "2": 3,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 0,
            "8": 3
          },
          "19": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 0,
            "8": 0
          },
          "20": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 2,
            "7": 0,
            "8": 3
          }
        }
      },
      "analyses": [
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_15.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "# Find and print mitochondrial gene names from adata.var\nmt_genes = adata.var.index[adata.var.index...."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import numpy as np\n\n# Calculate percentage of mitochondrial gene expression per cell\nadata.obs['perc..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Define mitochondrial genes\nmt_genes = adata.var.index[ad..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nfrom scipy import stats\n\n# Step 1: Calculate mitochondrial ge..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data to focus on CD16 Monocytes\ncd16_data = adata[adata.obs['cell_type..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset data to focus on CD16 Monocytes\ncd16_data = adata[adata.obs['cell_typ..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\n# Import required libraries\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure 'Admission' is a cate..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nfrom scipy import stats\n\n# Step 1: Subset the data to focus o..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_10.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n# Grouping cells by 'cell_type_coar..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n# Focus on CD14 Monocytes and CD16 ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Define relevant and under-explored cell types for this s..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Isolate specific cell types and ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# Eva..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# Pre..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# En..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Alternative variable name for clarity\nsubset_adata = ada..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_17.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import numpy as np\nimport pandas as pd\nfrom scipy.stats import mannwhitneyu\n\n# Define ribosomal prot..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport pandas as pd\nfrom scipy.stats import spearmanr\nfrom statsmodels.stats.multitest import multi..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Build k-nearest-neighbor graph with PCA and check for neighbors\nsc.pp.neighbo..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import mannwhitneyu\nimport pandas as pd\nfrom statsmodels.stats..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Ensure adata is a valid AnnData object\n# Define ribosoma..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import spearmanr\nfrom s..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy.stats import mannwhitneyu\nfrom statsmodels.stats...."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy.stats import mannwhitneyu, spearmanr\nfrom statsmo..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_13.ipynb",
          "total_code_cells": 9,
          "successful_cells": 2,
          "failed_cells": 7,
          "success_rate": 0.2222222222222222,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "nk_cells = adata[adata.obs['cell_type_fine'] == 'NK_cell'].copy()"
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "nk_cells = adata[(adata.obs['cell_type_fine'] == 'NK_cell') & (adata.obs['Ventilated'].isin(['Vent',..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "nk_cells_icu = adata[(adata.obs['cell_type_fine'] == 'NK_cell') & (adata.obs['Admission'] == 'ICU') ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "nk_cells_treatment = adata[(adata.obs['cell_type_fine'] == 'NK_cell') & (adata.obs['Admission'] == '..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "# Filter NK cells from ICU patients considering ventilatory status and sex\nfiltered_data = adata[(ad..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "import scanpy as sc\n\n# Extract NK cells from ICU patients considering ventilatory status, ensuring c..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Define actual metabolic genes of interest related to COV..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import pandas as pd\n\n# Check if 'percent_rrna' column is present, raise an error if not\nif 'percent_..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_11.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport pandas as pd\n\n# Extract NK cells focusing on COVID cases\nnk_cells = adata[(adata.obs['cell_t..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Set up the AnnData object for differential expression ana..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import fdrcorrection\n\n# Loa..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter the data specifically for NK cells from ICU\nnk_cells_ic = adata[(adata..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import fdrcorrection\n\n# Per..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Define gene sets associated with NK cell function and imm..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nfrom scvi.model import SCVI\nimport anndata as ad\nimport scanpy as sc\nfrom statsmodels.stats.multite..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Filter NK cells specifically for ICU patients and categor..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_1.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import mannwhitneyu\n\n# ..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Perform quality control\nassert 'nFeatu..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Run PCA and summarize variance\nsc.tl.pca(adata, svd_solver='arpack')\nvar_exp ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nfrom scipy.stats import pearsonr\n\n# Check if the relevant col..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Apply quality control to ensure data integrity\nadata = ada..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Perform Wilcoxon rank-sum test for di..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Perform initial quality control on th..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import numpy as np\nfrom scipy.stats import mannwhitneyu\n\n# Identify cells based on ventilation statu..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_18.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Calculate overall cell type distribution for pDCs and monocytes\ncell_type_counts = adata.obs['cel..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nfrom scvi.model import SCVI\n\n# Validate Admission and cell_type_coarse columns for missing data\nass..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport numpy as np\nfrom scvi.model import SCVI\n\n# Dynamically determine and exclude cells with high..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom scvi.data import synthetic_iid, setup_anndata\nfrom scvi..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport scvi\n\n# Ensure data quali..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Assume 'adata' is defined and..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport anndata as ad\n\n# Create a placeho..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport numpy as np\nfrom scvi.model import SCVI\n\n# Filter for high-quality pDCs by mitochondrial and..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_16.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Assume 'adata' is the in-memory AnnDa..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import numpy as np\nimport pandas as pd\nimport scanpy as sc\nfrom scipy.stats import mannwhitneyu\n\n# S..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Assume 'adata' is defined elsewhere, ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nfrom statsmodels.stats.multitest import ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import numpy as np\nimport scanpy as sc\n\n# Assume 'adata' is defined and in-memory.\n\n# Subset data fo..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Assume 'adata' is defined and in-memo..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "import numpy as np\nimport pandas as pd\nimport scanpy as sc\n\n# Subset data specifically for monocytes..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "import numpy as np\nimport pandas as pd\nimport scanpy as sc\nfrom statsmodels.stats.multitest import m..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_5.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nfrom scipy import stats\n\n# Investigate t..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import numpy as np\nimport pandas as pd\nimport scanpy as sc\nfrom scipy import stats\n\n# Handle missing..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import numpy as np\nimport scanpy as sc\nfrom scipy import stats\n\n# Filter CD14 and CD16 monocyte data..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import numpy as np\nimport scanpy as sc\n\n# Define resolution for easier adaptability\nresolution_value..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\nimport pandas as pd\n\n# Subset monocytes for sub-cluster..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import numpy as np\nimport pandas as pd\nimport scanpy as sc\nfrom scipy import stats\n\n# Load and subse..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\n# Import relevant libraries and tools\nimport scanpy as sc\nimport numpy as np\n\n# Verify non-empty su..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import numpy as np\nimport pandas as pd\nimport scanpy as sc\nfrom sklearn.linear_model import Logistic..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_2.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assuming the cell cycle gene lists are validated for the dataset\ns_genes = ['..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Correct cell cycle phase scoring based on validated gene lists\nadata.obs['cel..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Segment data into specific immune cell types of interest\n..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Load the AnnData object (assumed already in memory)\nkey_c..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# En..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Focus on CD8 T and CD14 Monocytes\nadata_cd8_cd14 = adata[adata.obs['cell_type..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# En..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import chi2_contingency\n\n# Ensure 'adata' ..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_4.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "# Preliminary data exploration with demographics integration\nimport pandas as pd\n\n# Check distributi..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset the dataset for CD14 Monocytes and T cells\nsubset_immune_cells = adata..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Verify the variable is correctly initialized\nif 'subset_..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\nsubset_immune_cells = adata[adata.obs['cell_type_fine'] ==..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Expand gene set to include a broader library\ncovid_genes_..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Normalize, log-transform, and scale\ncell_types = ['CD14 ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Subset data to CD14 Monocyte and CD8 T cells with extend..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming 'adata' is available in context, otherwise it s..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_12.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import pandas as pd\nimport numpy as np\n\n# Identify columns related to ribosomal proteins in var\nribo..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\n# Filter to target cell types with high ribosomal expression\nadata_highrib = adata[adata.obs['cell_..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom scvi.model import SCVI\n\n# Ensure 'adata' is defined pri..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Subset to NK cells and pDCs\nadata_nk_pdcs = adata[adata.ob..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\nimport torchmetrics\n\n# Fix import error by ensuring..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Initial filtering of NK cells for quality and cytokine relevance\nadata_nk_ce..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import chi2_contingency\nimport scvi\n\n# Ini..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport scvi\n\n# Initialize the SCVI model for NK and pDCs\nsc..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_6.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# SCTransform Normalization\nadata.layers['counts'] = adata.X.copy()  # Preserv..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Define quality filtering thresholds\nmin_genes = 200\nmax_genes = 2500\nmax_mt_p..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport logging\n\n# Initialize logging configuration\nlogging.basicConfig(level=log..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport logging\n\n# Initialize logging configuration\nlogging.basicConfig(level=log..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Define quality filtering criteria\nmin_genes = 100\nmax_mt_percentage = 10\n\n# C..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Defining quality filtering criteria leveraging additional ..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport logging\n\n# Initialize logging configuration\nlogging.basicConfig(level=log..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport logging\n\n# Initialize logging configuration\nlogging.basicConfig(level=log..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_3.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport scipy.stats  # Add this import for scipy\n\nribosomal_genes = [gene for ge..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import hypergeom\nfrom s..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# Ret..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# As..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# As..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# Lo..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats import multitest\nimport numpy as np\n..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom statsmodels.stats.multitest import multipletests\n\n# En..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_20.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "# Selects plasmacytoid dendritic cells (pDCs) for focused analysis\npdc_cells = adata[adata.obs['cell..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "# Extract and clean plasmacytoid dendritic cells (pDCs) for rRNA content analysis\npdc_cells = adata[..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "# Validate statistical significance of rRNA content difference using Mann-Whitney U test\n# Ensure we..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\n# Differential expression analysis for cytokine and receptor genes\nimport scanpy as sc\nfrom scipy i..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "# Perform pathway activity analysis for differentially expressed ISGs using gene set scoring\nimport ..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\n# Perform a differential analysis for ISG scores based on DPS\nimport scanpy as sc\nimport pandas as ..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\n# Perform cell-type specific differential expression analysis focusing on mitochondrial and PSAP ge..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\n# Investigate ligand-receptor interactions among CD14 Monocytes and CD8 T cells\nimport scanpy as sc..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_9.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Define a comprehensive and novel gene set for antigen processing and presenta..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\nimport numpy as np\n\n# Assuming 'adata' is defined elsew..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Comprehensive gene set for antigen presentation-related pathway in CD8 T cell..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport anndata\nimport numpy as np\n\n# Verify segmentation of CD8 T cells\ncd8_cel..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport anndata as ad\nimport numpy as np\n\n# Fix NaN issue by recalculating 'novel..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nfrom scipy.stats import spearmanr\nimport numpy as np\n\n# Filter for CD8 T cells\nc..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Assuming 'adata' is already defined a..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Filter for CD8 T cells\ncd8_cells = ada..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_7.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import pandas as pd\nimport scipy.stats as stats\n\n# Group data by focal immune-relevant cell types an..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport scanpy as sc\n\n# Perform differential expression analysis for RPL and RPS..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport scanpy as sc\n\n# Perform differential expression analysis for comprehensi..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport scanpy as sc\nimport numpy as np\nfrom scipy import stats\n\n# Subset the da..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n# Ensure the AnnData object 'adata'..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# If any other package is causing import issues, e..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport scanpy as sc\n\n# Subset the data for CD4 T cells and CD14 Monocytes\ncell_..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport scanpy as sc\nimport numpy as np\nfrom scipy import stats\nfrom statsmodels..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_19.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Subsetting the data for CD4 T cells\ncd4_t_cells = adata[adata.obs['cell_type_coarse'] == 'CD4 T']..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "# Conduct pathway enrichment analysis on differentially expressed genes\nimport pandas as pd\nimport n..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom anndata import AnnData\n\n# Ensure data filtering and nor..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Ensure data filtering and normalizati..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Subset the data for CD4 T cells\ncd4_t_cells = adata[adat..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming `adata` is already loaded and preprocessed befo..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Subset CD4 T cells from ICU and Floor patients\ncd4_t_cell..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\nimport scipy.stats\n\n# Subset CD4 T cells..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_14.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Overview of key HLA class II and IFN gene expression levels across cell types..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Expand differential expression analysis by considering additional relevant ge..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\n\n# Detailed examination of inflammatory ligands and rec..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\n\n# Analyze HLA and interferon-stimulated genes focused ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Define the function for correlat..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Define the function for correlati..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Set pseudotime analysis for CD8 T cells focusing on interferon and HLA genes..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nfrom statsmodels.stats.multitest import multipletests\n\n# Defi..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_20250807_122503/outputs/test_no_vlm_20250807_122518/test_no_vlm_analysis_8.ipynb",
          "total_code_cells": 9,
          "successful_cells": 4,
          "failed_cells": 5,
          "success_rate": 0.4444444444444444,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Perform preliminary quality control on AnnData object specifically filtering..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Perform quality control on AnnData object focusing on rRNA and mtRNA\nadata_cd..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Filter CD4 T cells and monocytes for further analysis, e..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\n\n# Assuming cd4_t_cells and monocyte..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Use SCTransform normalization via scvi\n# Assuming adata is the i..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport anndata as ad\n\n# Assuming 'adata' is previously loaded or de..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assumed 'adata' is the available AnnData object\n\n# Focus on neut..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\n\n# Assuming that 'adata' is already defined in the context\n\n# Focus..."
            }
          ]
        }
      ],
      "errors": []
    },
    "no_vlm_no_critique_20250807": {
      "test_name": "no_vlm_no_critique_20250807",
      "total_code_cells_attempted": 293,
      "total_failures": 161,
      "final_successful_cells": 137,
      "final_failed_cells": 34,
      "failure_rate": 0.5494880546075085,
      "final_success_rate": 0.8011695906432749,
      "failed_fix_attempts_per_step": {
        "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/logs/test_no_vlm_no_critique_log_20250807_122528.log": {
          "1": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "2": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 1,
            "8": 3
          },
          "3": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 2,
            "5": 0,
            "6": 3,
            "7": 0,
            "8": 0
          },
          "4": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "5": {
            "1": 0,
            "2": 2,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 1,
            "7": 0,
            "8": 0
          },
          "6": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 0,
            "7": 3,
            "8": 2
          },
          "7": {
            "1": 3,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 1,
            "7": 0,
            "8": 0
          },
          "8": {
            "1": 1,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "9": {
            "1": 0,
            "2": 0,
            "3": 3,
            "4": 3,
            "5": 3,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "10": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 3,
            "6": 3,
            "7": 3,
            "8": 0
          },
          "11": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "12": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 1,
            "7": 0,
            "8": 0
          },
          "13": {
            "1": 1,
            "2": 0,
            "3": 3,
            "4": 3,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "14": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "15": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 3,
            "8": 0
          },
          "16": {
            "1": 0,
            "2": 0,
            "3": 1,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
          },
          "17": {
            "1": 0,
            "2": 0,
            "3": 1,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 2,
            "8": 0
          },
          "18": {
            "1": 0,
            "2": 2,
            "3": 0,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 0,
            "8": 3
          },
          "19": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 3,
            "7": 0,
            "8": 2
          },
          "20": {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0
          }
        }
      },
      "analyses": [
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_19.ipynb",
          "total_code_cells": 9,
          "successful_cells": 3,
          "failed_cells": 6,
          "success_rate": 0.3333333333333333,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "immune_cells = adata[adata.obs['cell_type_coarse'].isin(['B', 'T', 'NK', 'Monocyte'])]"
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "immune_cells = adata[adata.obs['cell_type_coarse'].isin(['B', 'T', 'CD14 Monocyte'])]"
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "specific_immune_cells = adata[adata.obs['cell_type_coarse'].isin(['CD14 Monocyte', 'DC'])]"
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimmune_stress_cells = adata[adata.obs['cell_type_coarse'].isin(['CD8 T', 'CD14 Monocyte'])]\n"
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "immune_cells = adata[adata.obs['cell_type_coarse'].isin(['NK', 'DC'])]"
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport scvi\nimport anndata\n\n# Assuming 'adata' is defined earlier in your conte..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport anndata\n\n# Assuming 'adata' is defined earlier in your context and is an ..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assuming 'adata' is defined earlier in your context and i..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_18.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "print(adata)"
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\n\n# Define ligands and receptors to explore that are dis..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Subset data for monocytes and T cells focusing on stress response genes\nstre..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import fisher_exact\n\n# Assuming DE results..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Assuming data is already in adata\nstress_genes = ['HSPA1..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import spearmanr\n\n# Define stress-related genes\nstress_genes =..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Verify that 'cell_type_coarse' exists in the observation data.\nif 'cell_type..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scipy.stats import mannwhitneyu\n\n# Ensure adata has been defined and conta..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_15.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step: Perform data preprocessing\n# Normalizing total counts per cell\nsc.pp.no..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step: Perform dimensionality reduction\n# Apply PCA on the highly variable gen..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Step: Conduct differential expression analysis\n# Perform DE analysis across ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Filter the adata to only include mono..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc \n\n# Identify NK cells and plasmablasts in the dataset \nnk_adata = adata[adata.o..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\n\n# Pathway analysis function\ndef pathway_enrichment(gen..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Isolate plasmablasts and dendritic cells (DCs) from the dataset\nplasmablast_..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Subset for dendritic cells\nsubset_adata = adata[adata.obs..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_16.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "adata.obs['cytokine_receptor_score'] = (adata[:, ['TNF', 'IL1B', 'IL6']].X * adata[:, ['TNFRSF1A', '..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "cd14_monocytes = adata[adata.obs['cell_type_coarse'] == 'CD14 Monocyte']\ncd16_monocytes = adata[adat..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Calculate mean expression of HLA class I and II genes in ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Isolate CD14+ monocytes and CD8 T cells\ncd14_monocytes = ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport numpy as np\nfrom scipy import stats\nimport scanpy as sc\n\n# Preprocess to ensure absence of N..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport numpy as np\nfrom scipy import stats\nimport scanpy as sc\n\n# Filter for immune cell types of i..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport scanpy as sc\n\n# Focus on CD14 Monocyte with respect to interferon and cyt..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import numpy as np\nfrom scipy import stats\nimport scanpy as sc\n\n# Isolate CD16 Monocytes and gd T ce..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_14.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Step 1: Inspect the distribution of `Sex` in the dataset\nmale_count = (adata.obs['Sex'] == 'M').s..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "immune_cell_types = ['CD14 Monocyte', 'CD8 T', 'CD4 T']\nadata_subset = adata[adata.obs['cell_type_co..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform subclustering on CD14 Monocytes\nmonocytes = adata_subset[adata_subse..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Differential Expression Analysis..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Focus on antigen presentation and interferon-related gen..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Subset Monocytes and T cells\nmonocytes..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Define cytokine-related genes of interest\ncytokine_genes =..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\ncytokine_receptor_genes = ['IL6R', 'IL10RB', 'TNFRSF1A', 'I..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_12.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\ndiff_surface_markers = adata.var_names.str.startswith('CD')  # Example filter f..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter cytokine receptor genes (e.g., based on name or IDs from var annotatio..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\n\n# Subset for monocytes and T cells based on coarse cell typ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Filter for monocytes and T cells\nmonocytes = adata.obs['ce..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assume adata is provided in the context or defined elsewh..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assuming 'adata' has been defined earlier in the code\n\n# ..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Filtered data for specific cytokines a..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Focus on monocytes in COVID-19 patients\nmonocytes_covid =..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_17.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\n\n# Extract cell types and COVID status\ncell_types = adata.ob..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data for CD16 monocytes and pDCs\nkey_cell_types = ['CD16 Monocyte', 'p..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\n\n# Define a dummy perform_pathway_analysis function for illu..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter out the CD16 Monocytes and pDCs\nkey_cell_types = ['CD16 Monocyte', 'pD..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Subset data for CD16 Monocytes and pDCs\nkey_cell_types =..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import numpy as np\nimport pandas as pd\n\n# Subset data for analysis\nsubset = adata[(adata.obs['Status..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Ensure 'adata' is properly initialize..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport scipy.stats\n\n# Subset data for an..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_2.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Step 1: Neighborhood graph construction\nsc.pp.neighbors(adata, n_neighbors=1..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Annotation of clusters based on marker genes\ndef annotate_clusters_with_marke..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n# Differential expression analysis for monocyte clusters\nsc.tl.rank_genes_group..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure receptor genes are in variable names\nreceptor_genes = ['TNFRSF1A', 'I..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Interferon-stimulated gene (ISG) list\nisg_genes = ['ISG15', 'MX1', 'IFIT1']\ni..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Step 1: Ligand-Receptor Analysis\nligand_receptor_pairs = ..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Differential expression analysis for NK cells and plasmablasts\nif 'NK_cell' ..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Adaptive immune-related gene list\nadaptive_immune_genes ..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_4.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import pandas as pd\nimport numpy as np\nimport scanpy as sc\n\n# Define a list of metabolism-related ge..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "\nimport pandas as pd\nimport numpy as np\nimport scanpy as sc\nfrom scipy import stats\n\n# Define metabo..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Clustering using the Leiden algorithm\nsc.pp.neighbors(adata, n_neighbors=15, ..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Marker gene identification for Monocytes and T Cells\nsc.tl.rank_genes_groups..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Annotate the mitochondrial genes by checking if they start with 'MT-' or 'mt..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Define ligands and receptors of interest\nligands_receptors = {\n    'TNF': 'T..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Define chemokine receptors of int..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport pandas as pd\nfrom scipy import stats\n\n# Potential ligand-receptor pairs\npotential_pairs = [\n..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_10.ipynb",
          "total_code_cells": 9,
          "successful_cells": 5,
          "failed_cells": 4,
          "success_rate": 0.5555555555555556,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport numpy as np\n\n# Calculate the mean and standard deviation for each gene a..."
            },
            {
              "cell_index": 7,
              "success": false,
              "code_preview": "from scipy.stats import zscore; adata.var['zscore_HVG'] = zscore(adata.var['CV'])"
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import numpy as np; mean_covid = adata[adata.obs['Status']=='COVID'].X.mean(axis=0); mean_healthy = ..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "subset_cells = adata[(adata.obs['cell_type_coarse'] == 'Monocyte') | (adata.obs['cell_type_coarse'] ..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Assuming 'adata' is defined somewhere before this code\n# ..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nfrom scipy.stats import pearsonr\n\n# Step 1: Subset the data ..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom celltypist import models\nfrom celltypist.models import Model\nimport anndat..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Select key immune cell types (assuming 'CD4 T', 'CD8 T',..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_3.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Step 1: Exploratory Data Analysis\nimport pandas as pd\n\n# Check distribution of 'Admission' and 'V..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Differential expression analysis on monocytes and T cells between ICU/Vent v..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform cell-type-specific differential expression analysis\nfor cell_type in..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import fisher_exact\n\n# Function to compute..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Step 2: Differential Expression Rerun for Correct Key Generation\n# Ensure cor..."
            },
            {
              "cell_index": 19,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Step 2: Pseudotime analysis on CD14 Monocytes and CD8 T cells for temporal d..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Differential expression focusing on mitochondrial genes\nf..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Import a predefined list of ligand-receptor pairs\nligand..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_13.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\ngene_set_oxidative_stress = ['SOD2', 'GSR', 'CAT', 'GPX1', 'GSTA1']\ngene_set_mitochondrial_function..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Score for cell types with significant oxidative stress levels\nsc.pp.neighbors..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\nimport scvi\nimport torch\nimport anndata as ad\n\n# Ensure torch and scvi-tools are compatible\n# Uncom..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.data import setup_anndata\nfrom scvi.model import SCVI\n\n# Assume the m..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Define gene set related to hypoxia response\nhypoxia_gene_s..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import pandas as pd\nimport numpy as np\nimport scanpy as sc\nfrom scipy.stats import ttest_ind\n\n# Get ..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "# Conduct Differential Expression Analysis for Monocytes and T cells\nimport scanpy as sc\nimport pand..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import pandas as pd\nimport scanpy as sc\n\n# Function to extract receptor-ligand pairs\n# Here, we mock..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_1.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Calculate the mean expression of ribosomal protein genes (RPL and RPS) across different cell type..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\n# Conduct functional enrichment analysis on ribosomal protein expression changes in RBCs.\nimport pa..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import pandas as pd\nimport scanpy as sc\n\n# Select monocytes and T cells\nmonocytes_tcells = adata[ada..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Perform Ligand-Receptor interaction analysis\nmonocytes_tc..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Focus on specific genes of interest related to the hypot..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import pandas as pd\nimport scanpy as sc\n\n# Select stress-related and inflammation genes for analysis..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport scanpy as sc\nfrom scipy.stats import spearmanr\n\n# Focus on monocytes and..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Focus on monocytes and T Cells\nmonocytes_tcells = adata[adata.obs['cell_type_..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_7.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is already loaded and has layers 'spliced' and 'unspliced'\n..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Ensure the loaded data is used\n# Loading assuming data is available in memor..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Assuming 'adata' is already loaded\n# Perform PCA for dimensionality reduction..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Define ligand-receptor pairs of inter..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\n\n# Define ER stress-related genes of inte..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\n\n# Define ER stress and cytokine..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Define relevant cell types\ncell_types_of_interest = ['CD14 Monocyte', 'CD8 T'..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport scipy.stats as stats\n\n# Define hyp..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_11.ipynb",
          "total_code_cells": 9,
          "successful_cells": 8,
          "failed_cells": 1,
          "success_rate": 0.8888888888888888,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Annotate cell cycle phases based on S and G2M scores\ns_genes = ['MCM5', 'PCN..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Focus on specific immune cell types\ncell_types = ['CD8 T',..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Focus analysis on specific immune cell types and interfe..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scvi.model import SCVI\n\n# Set up and train SCVI model\nscvi_model = SCVI(ad..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Define stress response genes to focus the analysis\nstress..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Define genes of interest\ninflammatory_cytokines = ['TNF',..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\n\n# Define cell types and genes of interest\ncell_types = ['CD8..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy.stats import fisher_exact\n\n# Focus on CD14 Monocy..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_8.ipynb",
          "total_code_cells": 9,
          "successful_cells": 9,
          "failed_cells": 0,
          "success_rate": 1.0,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nimport numpy as np\n\n# Load metadata and gene expression dat..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n# Select high RNA decay score cell ..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Explore RNA decay score d..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Select high RNA decay score cell ..."
            },
            {
              "cell_index": 16,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Investigate association between D..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\nfrom scipy import stats\n\n# Filter for cell types of interest..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import pandas as pd\nfrom scipy import stats\n\n# Determine cell type specificity for CNOT7-TNF correla..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Filter for CD8 T cells and compare COVID-19 patients with..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_9.ipynb",
          "total_code_cells": 9,
          "successful_cells": 6,
          "failed_cells": 3,
          "success_rate": 0.6666666666666666,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "\n# Define gene lists for cell cycle phases\ns_genes = ['MCM5', 'PCNA', 'TYMS', 'FEN1', 'MCM2', 'MCM4'..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\n# Fix gene annotation issues by checking against existing annotations\ncorrected_s_genes = [gene for..."
            },
            {
              "cell_index": 10,
              "success": false,
              "code_preview": "\n# Import necessary libraries\nimport scvi\nimport scanpy as sc\n\n# Ensure the correct anndata object i..."
            },
            {
              "cell_index": 13,
              "success": false,
              "code_preview": "\n# Import libraries\nimport scvi\nimport scanpy as sc\n\n# Subset anndata for CD8 T cells only\ncd8_t_cel..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport numpy as np\n\n# Correct the file path to the actual location of your adat..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Filter data to include only CD8 T cells and CD14 Monocytes\nadata_cd8_c14 = ad..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset to CD14 Monocytes for subclustering\nmonocytes = adata[adata.obs['cell_..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset to CD8 T cells and CD14 Monocyte subclusters\ncd8_t_cells_monocytes = a..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_5.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\nimport pandas as pd\n\n# Define metabolic pathways of interest. Example pathways n..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "\nimport pandas as pd\nimport scipy.stats as stats\nimport anndata\n\n# Assuming `adata` is an AnnData ob..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "import scanpy as sc\nfrom scipy import stats\n\n# Define transcription factors potentially regulating i..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\n\n# Replace dummy data with realistic example if needed\nadat..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is pre-defined and has been loaded correctly. \n# Ensure tha..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Perform differential expression analysis for interferon-stimulated genes\nisg..."
            },
            {
              "cell_index": 22,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Ensure the data has been preprocessed (normalized and PCA computed)\nsc.pp.nei..."
            },
            {
              "cell_index": 25,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nfrom scipy import stats\n\n# Define ISGs potentially relevant for severe COVID-19..."
            }
          ]
        },
        {
          "notebook_path": "covid_ablation_080725/test_results_no_vlm_no_critique_20250807_122506/outputs/test_no_vlm_no_critique_20250807_122528/test_no_vlm_no_critique_analysis_6.ipynb",
          "total_code_cells": 9,
          "successful_cells": 7,
          "failed_cells": 2,
          "success_rate": 0.7777777777777778,
          "cell_details": [
            {
              "cell_index": 1,
              "success": true,
              "code_preview": "import scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport se..."
            },
            {
              "cell_index": 4,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data to only CD14+ monocytes\ncd14_monocytes = adata[adata.obs['cell_ty..."
            },
            {
              "cell_index": 7,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Subset data to only CD14+ monocytes\ncd14_monocytes = adata[adata.obs['cell_ty..."
            },
            {
              "cell_index": 10,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Define healthy control subset\nhealthy_controls = adata[adata.obs['Status'] =..."
            },
            {
              "cell_index": 13,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Select CD14+ monocytes data\ncd14_monocytes = adata[adata.obs['cell_type_coars..."
            },
            {
              "cell_index": 16,
              "success": false,
              "code_preview": "\nimport scanpy as sc\n\n# Subset data to only CD8 T cells\ncd8_t_cells = adata[adata.obs['cell_type_coa..."
            },
            {
              "cell_index": 19,
              "success": true,
              "code_preview": "import scanpy as sc\n\n# Select data for CD8 T cells\ncd8_t_cells = adata[adata.obs['cell_type_coarse']..."
            },
            {
              "cell_index": 22,
              "success": false,
              "code_preview": "\nimport scanpy as sc\nimport pandas as pd\nfrom scipy.stats import spearmanr\nimport numpy as np\n\n# Ass..."
            },
            {
              "cell_index": 25,
              "success": true,
              "code_preview": "\nimport scanpy as sc\n\n# Assuming 'adata' is defined and is an AnnData object\n# Subset NK cells data\n..."
            }
          ]
        }
      ],
      "errors": []
    }
  }
}